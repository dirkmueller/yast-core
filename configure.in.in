## core configure.in.in

## initialize
@YAST2-INIT-COMMON@
AC_SYS_LARGEFILE

@YAST2-INIT-PROGRAM@

## special stuff

# libycp needs flex and bison
AM_PROG_LEX
if test -z "$LEX"; then
  AC_MSG_ERROR([Install the package flex.])
fi
AC_CHECK_PROGS(YACC, 'bison -y -d -v' byacc, false)
if test "$YACC" = false; then
	AC_MSG_ERROR([bison not installed])
fi

# liby2:Y2SerialComponent needs termios.h in glibc-devel
# (not term.h in ncurses-devel)

# libycp: y2crypt needs xcrypt.h -> libxcrypt, libxcrypt-devel
yast_found_xcrypt=no
AC_CHECK_HEADER(xcrypt.h,[yast_found_xcrypt=yes])
if [[ "$yast_found_xcrypt" = "no" ]]; then
 AC_MSG_ERROR(Headers for xcrypt are missing. Please install the package libxcrypt-devel.)
fi


Y2UTIL_CFLAGS='-I$(top_srcdir)/liby2util-r/src/include'
Y2UTIL_LIBS='$(top_builddir)/liby2util-r/src/liby2util.la'
AC_SUBST(Y2UTIL_CFLAGS)
AC_SUBST(Y2UTIL_LIBS)

# for historic reasons this value is called SUSEVERSION
SUSEVERSION=`echo $VERSION | cut -d . -f 1,2`
AC_SUBST(SUSEVERSION)

AGENT_INCLUDES='dnl
 -I$(top_srcdir)/libycp/src/include dnl
 -I$(top_srcdir)/liby2/src/include dnl
 -I$(top_srcdir)/libscr/src/include dnl
 ${Y2UTIL_CFLAGS}'
AC_SUBST(AGENT_INCLUDES)

# override AGENT_LIBADD which is AC_SUBSTed in YAST2-CHECKS-PROGRAM
AGENT_LIBADD='dnl
 $(top_builddir)/libscr/src/libscr.la dnl
 $(top_builddir)/libycp/src/libycp.la dnl
 $(top_builddir)/liby2/src/liby2.la dnl
 ${Y2UTIL_LIBS}'

## <ext/hash_map> produces ugly warnings in gcc 4.3, but its replacement,
## <unordered_map>, is in C++0x which is not stablilized yet.
## More importantly, this thing is in a public header so we need to propagate
## the findings to yast2-core users
AC_PROG_CXX
AC_MSG_CHECKING([for version of C++ standard])
GCCVER=`$CXX -v 2>&1 | tail -n1`
case "$GCCVER" in
[    gcc\ version\ 4.[3456789]*)]dnl **** quoting
dnl we need a HAVE_* flag for a public header, yuck
dnl	AC_DEFINE([HAVE_CXX0X], 1, [Define to 1 if the c++ compiler knows <unordered_map> and the like])
dnl	Y2CORE_CFLAGS="-std=c++0x"
	# gnu++0x instead of c++0x so that
	# we do not lose gnu extensions like typeof
	Y2CORE_CFLAGS="-std=gnu++0x -DHAVE_CXX0X"
	AC_MSG_RESULT([c++0x])
	;;
    *)
	Y2CORE_CFLAGS=""
	AC_MSG_RESULT([older than c++0x])
	;;
esac
AC_SUBST(Y2CORE_CFLAGS) dnl included in {C,CXX}FLAGS in YAST2-CHECKS-PROGRAM 

AX_CHECK_DOCBOOK
CREATE_PKGCONFIG=true
## some common checks
@YAST2-CHECKS-COMMON@
@YAST2-CHECKS-PROGRAM@
@YAST2-CHECKS-TESTSUITE@

## check for blocxx
dnl FIXME assumes PCRE
AC_CHECK_HEADER(blocxx/BLOCXX_config.h, [yast_found_blocxx=yes])
if [[ "$yast_found_blocxx" != "yes" ]]; then
 AC_MSG_ERROR(Headers for blocxx are missing. Please install the package blocxx-devel.)
fi

PKG_CHECK_MODULES(DBUS, dbus-1)

## check for PolicyKit
AC_ARG_ENABLE([policykit],
    AS_HELP_STRING([--enable-policykit], [Enable experimental PolicyKit support]),
        [
            case "${enableval}" in
                yes) policykit=yes ;;
                no) policykit=no ;;
                *) AC_MSG_ERROR(--enable-policykit: Unknwon value ${enableval}) ;;
            esac
        ],
        [policykit=yes])

if test "x${policykit}" == xyes ; then
    PKG_CHECK_MODULES(POLKIT, [ polkit-dbus >= 0.7 ],
        [
            HAVE_POLKIT=1
            AC_DEFINE([HAVE_POLKIT], 1, [Have PolicyKit])
            policydir=`pkg-config polkit-dbus --variable prefix`/share/PolicyKit/policy/
            AC_SUBST(policydir)
        ],
        [
            HAVE_POLKIT=0
            AC_MSG_ERROR([*** PolicyKit support not found, install PolicyKit-devel: 'zypper in PolicyKit-devel' or libpolkit-dbus-dev.deb])
        ])
else
    HAVE_POLKIT=0
fi

AC_SUBST(POLKIT_CFLAGS)
AC_SUBST(POLKIT_LIBS)
AC_SUBST(HAVE_POLKIT)
AM_CONDITIONAL([HAVE_POLKIT], [test "x$HAVE_POLKIT" = x1])

## and generate the output
AC_CONFIG_FILES([
	liby2/doc/Y2-access.html
	liby2/doc/Y2-components.html
	scr/doc/SCR.html
	scr/doc/intro_to_scr.html
])
@YAST2-OUTPUT@
