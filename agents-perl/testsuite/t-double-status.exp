#!/usr/bin/expect --
# test ...

set timeout 3
expect_after {    
    default {
	puts "OOPS, last matched <<$expect_out(buffer)>>"
	exit 1
    }
    # pass thru agent stderr
#    -i $error_spawn_id
#    default {send_user $expect_out(buffer)}
}

#stty -echo

#set prog "/usr/lib/YaST2/servers_non_y2/ag_background"
set prog "../ag_background"
puts $prog

# does not work
#spawn "sh" "-c" "PERLDB_OPTS='NonStop=1 AutoTrace=1 frame=6' perl -dS $prog"

# can pass -d
spawn $prog $argv

match_max 100000

# TODO use a basic loop like in example and docs
# (while running, or while output open? clarify!)

# sleep: have it still running while this simple test runs
send "`Execute(.run_output_err, \"echo O; echo O; sleep 1; echo OUT; echo >&2 ERR; exit 2\")\r"
expect "(true)$"

while {1} {
    send "`Read(.isrunning)\r"
    expect {
	"(true)$" {sleep 1}
	"(false)$" break
    }

}

send "`Read(.pid)\r"
expect "(-1)$"
#send_user "\n"

send "`Read(.store)\r"
expect "(true)$"
send "`Read(.status)\r"
expect "(2)$"

send "`Read(.lines)\r"
expect "(3)"
# bug in original agent
expect -re "(\"\")?$"
send "`Read(.lines_err)\r"
expect "(1)$"
send "`Read(.newlines)\r"
expect "(3)$"
send "`Read(.newlines_err)\r"
expect "(1)$"
send "`Read(.newout)\r"
expect -ex "\[\"O\",\"O\",\"OUT\",\] "
send "`Read(.newerr)\r"
expect -ex "\[\"ERR\",\] "

send "`Read(.output_open)\r"
expect "(false)$"
send "`Read(.output_open_err)\r"
expect "(false)$"
send "`result(true)\r"
expect eof
