<?xml version="1.0" encoding='ISO-8859-15'?>

<section id="scope_handling">
<title>Variables and Scope</title>
<para>
A few thoughts about handling symbols of variables and functions and their scope in the YCP interpreter.
</para>

<!-- ========================================================== -->
<section><title>Motivation</title>
<para>
The original YCP design was targeted towards a quickly to implement,
parse, and interprete script language. To reduce the implementation
effort to an absolute minimun, the variable namespace was flat and
name binding was 'late' (lookup occured at runtime instead of at parse time)
</para>
<para>
This implementation shortcut lead to all kinds of errors and unclear
semantics, esp. since the behaviour of a function was determined by
it's <emphasis>calling</emphasis> context instead of it's <emphasis>definition</emphasis>
context.
</para>
<para>There also was no parse time typechecking, all was done at runtime
adding badly to the execution time behaviour of ycp programs.</para>
<para>
The new YCP interpreter changes these deficiencies by
<itemizedlist>
<listitem><para>Implementing parse-time binding and scopes</para></listitem>
<listitem><para>Adding a static type system</para></listitem>
</itemizedlist>
Both additions to the interpreter build up rather detailed information
about the data flow and the symbol (variable, function) usage in
the YCP code. This information helps tremendously during interpretation
esp. since all kinds of runtime checks aren't needed anymore.
</para>
</section> <!-- motivation -->

<!-- ========================================================== -->
<section><title>Goal</title>
<para>
For the static type system, the parser builds up a symbol table
and a symbol reference tree for the code. This effectively replaces
the ascii-style symbol representation with a reference-style one.
We don't save the symbol name any more but a reference to the
symbol table built up by the parser. This saves runtime space and
execution time (no lookups needed).
</para>
</section> <!-- goal -->

<!-- ========================================================== -->
<section><title>Requirements</title>
<para>
The amount and type of data needed during parse time is different from
the data during runtime. However, additional runtime data is useful when
reporting errors.
</para>
<para>
Symbol tables must be named in order to implement named environments
as needed by modules.
</para>
<para>
Symbol tables must be stacked in order to implement local environments
as needed by nested blocks.
</para>
<para>
Symbol tables are an essential part of YCP blocks.
</para>
</section> <!-- requirements -->

<!-- ========================================================== -->
<section><title>Implementation</title>

<section><title>Data structures</title>
<para>
The implementation of scopes is done in three data objects
<itemizedlist>
<listitem><para>SymbolEntry</para></listitem>
<listitem><para>SymbolTable</para></listitem>
<listitem><para>TableEntry</para></listitem>
</itemizedlist>
</para>
<section><title>SymbolEntry</title>
<para>
The <literal>SymbolEntry</literal> class implements the base data object for
all kind of names (variable, functions, namespaces, ...) needed at runtime. Most important,
it provides memory for storing a variables value and keeps the 'belongs to'
information about its defining block.</para>
<para>
In order to save space, all names are kept in a string hash which merges
duplicate strings into a single one. This also make string compares as
easy as comparing pointers.</para>
</section> <!-- SymbolEntry -->

<section><title>SymbolTable</title>
<para>Symbol tables are used to organize symbol lookups and scopes during
parse time.</para>
<para>The interpreter keeps three tables, one for (predefined) builtins, one for global
and one for local symbols. The builtin table cannot be overridden and is
checked before the two other tables. This ensures that builtin definitions
are always valid and not hidden by user definitions.</para>
<para>The global table tracks global definitions of modules. Such definitions
are exported and viewable from outside by using the proper module prefix.</para>
<para>The local table tracks all remaining names and implements the block level
(as opposed to the namespace level of the global table) scope.</para>
<para> </para>
<para>The symbol table is organized as a plain hash table with a fixed
size and (doubly linked) bucket overflow lists. Information about the
local scope is kept in the <literal>TableEntry</literal> class.</para>
</section> <!-- SymbolTable -->

<section><title>TableEntry</title>
<para>
The <literal>TableEntry</literal> adds (local) scope information needed at parse time
to a <literal>SymbolEntry</literal> by implementing a stack type list of symbols with identical names.</para>
<para>The innermost symbol is always on top of the stack and found first
when looking up a name in the symbol tables hash.</para>
</section> <!-- TableEntry -->

</section> <!-- data structures -->

<section><title>Opening and closing of scopes</title>
<para>
When declaring a symbol, the parser must check if this declaration is allowed
(a new symbol) or not (redeclaration).</para>
<para>This is easy if the name didn't appear yet but gets tricky if the name
is already known. In the latter case, scope comes into play since
redeclaring a name in a newly opened block is allowed while
redeclaring a name in the same block is not.</para>
<para>This is done by storing a pointer to the block
<footnote><para>(Although this pointer is mostly parse-time data, it is kept in the runtime
SymbolEntry to support bytecode I/O)</para></footnote> where the name
is declared in the symbol entry.</para>
<para>Comparing the block pointer with the current local block easily
reveals erroneous redeclarations if the block of the already declared
variable is identical to the current block.</para>
<para> </para>
<para>Closing scopes requires deleting all symbols of the current scope
from the symbol tables. As blocks implement scopes and keep a list
of all their symbol definitions, the correct symbols can be removed easily.
</para>
</section> <!-- Opening and closing of scopes -->

<!-- ========================================================== -->
<section><title>Evaluation of a function call</title>
<para>
A function call consists of a pointer to the function (symbol
table entry of category function)
</para>
</section> <!-- Evaluation of a function call -->

<!-- ========================================================== -->

<section><title>Implementing local environments with symbol references</title>
<para>
Problem: Time-space efficiency of local environments
</para>
<para>Possible solutions
<itemizedlist>
<listitem><para>
 Create all symbols during parse, store pointer to symbols</para>
<para>   + no runtime symbol creation/removal</para>
<para>   - needs space for all symbols</para>
<para> </para>
</listitem>
<listitem><para>
 Create symbols at runtime (at start of block evaluation)</para>
<para>   Store number of symbols needed at block header, allocate
   symbol space at block initialization, symbol reference is
   offset to symbol space of block</para>
<para>   - runtime (stack) allocation of symbols</para>
<para>   + no memory tradeoff</para>
<para> </para>
</listitem>
</itemizedlist>
</para>
<para>Choosen solution</para>
<para>
=> symref == symbol array of block + offset
</para>
<para>
   since each block has symbol array :
</para>
<para>
     symref == block + offset
</para>
<para>
   -> no lookup at runtime !
</para>
</section> <!-- Implementing local environments with symbol references -->

<!-- ========================================================== -->

<section><title>Blocks and symbols</title>
<para>
symbols can only 'live' in blocks, the block 'owns' the symbol(s)
</para>
<para>
the symbol table only keep links to symbols for reference and
scope tracking
</para>
<para>
symbols have an initial value (ivalue) and a current value (cvalue)
The initial value is an expression to be evaluated at initialization
time (can be a function call with side-effects !)
The current value is a (evaluated) value.
</para>
<para>
blocks are (linked) list of statements.
</para>
<para>
 statements can be
<itemizedlist>
<listitem><para>expressions (function call)</para></listitem>
<listitem><para>symbol definitions (initial symbol creation)</para></listitem>
<listitem><para>assignments (symbol value change)</para></listitem>
<listitem><para>control statements (if, loop, break, return, ...)</para></listitem>
</itemizedlist>
</para>

<para>
  Variables are always associated with a namespace.
</para>
<para>
  Either a known namespace (with a name)
  or the global namespace (no name, but distinguished)
  or a local namespace (no name)
</para>
<para>
  All namespaces are defined within a block, so all variables
  belong to a block.
  There's one exception: formal arguments to a function. Such
  variables neither belong to the block surrounding the function,
  nor to the block defining the function body.
</para>
<para>
  Treat variables as 'slots' inside a block. Reference them
  as block + slot_offset at runtime. Symbol tables are only
  needed during parse time to look up symbols by name. Names
  are not part of runtime, just handy for log or error output.
</para>
<para>
  -> distinguish parse-time from run-time !
</para>

</section> <!-- blocks and symbols -->
<!-- ========================================================== -->

</section> <!-- implementation -->

</section> <!-- variables and scope -->
