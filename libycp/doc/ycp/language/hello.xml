<?xml version="1.0" encoding='ISO-8859-15'?>

<section id="hello"><title>Hello, world</title>
  <para>
  YCP is used in the YaST environment which always provides a user interface
  for interaction with the user. Therefore, YCP does not implement the standard
  I/O channels like <literal>stdin</literal> and <literal>stdout</literal>. Instead
  the user interface or logging (for debug) is used to communicate with the
  user (or developer).</para>
  <para>So you'll not find any print statements for easy message output in YCP.
  Things are a bit more AUFWENDIG to output a message, but the result is also
  a lot more nicer.</para>

  <section><title>A simple popup window</title>
  <para>
  The following piece of code implements the famous <emphasis>Hello, world!</emphasis>
  example in YCP. You'll find the code <ulink url="../examples/HelloWorld.ycp">here</ulink>.
  <programlisting>
{
    UI::OpenDialog(
	       `VBox( 
		     `Label("Hello, world!"),
		     `PushButton(`opt(`default), "&Ok")
		     )
	       );
    UI::UserInput();
    UI::CloseDialog();
}
  </programlisting>
  You can run this program from the commandline (<command>cd</command> to the <filename>examples</filename>
  directory first) as follows: <command>yast2 ./HelloWorld.ycp</command>
  </para>
  <para>
  Depending on the value of the <literal>DISPLAY</literal> variable, the program will run as an <literal>X11</literal>
  or <literal>curses</literal> application. You can run it as <command>DISPLAY= yast2 ./HelloWorld.ycp</command>
  to force it to curses.</para>
  <note><para>The <literal>DISPLAY</literal> environment variable also makes it possible to redirect the window to
  another machine. This also makes graphical remote administration with YaST a breeze.</para></note>
  <para>
  As mentioned above, the final return value is shown if a YCP program is run
  from command line. The following example shows this.
  <programlisting>
  {
     return "Hello, world !\n";
  }
  </programlisting>
  </para>
  </section>

  <section><title>Using variables</title>
  <para>
  This example shows using a variable for the string. As you might have guessed, it's
  otherwise identical to the first example.
  <programlisting>
  {
     string h = "Hello, world !\n";
     return h;
  }
  </programlisting>
  </para>
  </section>

  <section><title>Using expressions</title>
  <para>
  This example shows how to construct the output from two strings.
  <programlisting>
  {
     string h = "Hello";
     string w = ", world !\n";
     return h + w;
  }
  </programlisting>
  </para>
  </section>

  <section><title>Using functions</title>
  <para>
  The last introductory example shows using a function.
  <programlisting>
  {
     string hw ()
     {
	return "Hello, world !\n";
     }

     return hw ();
  }
  </programlisting>
  </para>
  </section>

  <section><title>Summary</title>
  <para>
  If you're somewhat familiar with the C programming language, the above
  examples should not contain any surprises. As with any language, learning
  the basic syntax is easy but getting used to the various built-in functions
  is somewhat time-consuming.
  </para>
  </section>
</section>

