<section>
<title>ToDo</title>
<para>
ToDo
<itemizedlist>
<listitem><para>constant naming scheme for member functions and variables</para><para>
 This is code cleanup, and if we're get to it, we should improve
 type safety first. At least add comments why casting foo* to bar* works.</para></listitem>

<listitem><para>pass full name of source file to ycode</para></listitem>
<listitem><para>pass correct line number to ycode</para><para>
 That is part of good error reporting. Not top priority.</para></listitem>

<listitem><para>copy-on-write for lvalues</para><para>
 Existing ycp code works without it.</para></listitem>

<listitem><para>syntax and semantic documentation</para></listitem>

<listitem><para>ycode compile (-c option)</para></listitem>
<listitem><para>ycode output (-> Save() class member)</para></listitem>
<listitem><para>ycode input (-> Load() class member)</para><para>
 Optional features.</para></listitem>

<listitem><para>UI declarations</para></listitem>
<listitem><para>SCR declarations</para></listitem>
<listitem><para>WFM declarations</para><para>
 We urgently need this or something equivalent so that we can at least
 parse existing code base and discover other to-do's.</para></listitem>


<listitem><para>bug # 11085 -> tostring() changes for integer and float</para>
<screen>
mfabian@gregory:~/c$ cat t.c
#include &lt;locale.h&gt;
#include &lt;ctype.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

int main() {
        if ( NULL == setlocale(LC_ALL,&quot;&quot;)) {
                printf(&quot;locale not supported by glibc\n&quot;);
                exit(1);
        }
        printf(&quot;%f\n&quot;,3.14);
}
mfabian@gregory:~/c$ gcc t.c -o t
mfabian@gregory:~/c$ LC_NUMERIC=en_GB ./t
3.140000
mfabian@gregory:~/c$ LC_NUMERIC=de_DE ./t
3,140000
mfabian@gregory:~/c$ LC_NUMERIC=en_GB.UTF-8 ./t
3.140000
mfabian@gregory:~/c$ LC_NUMERIC=de_DE.UTF-8 ./t
3,140000
mfabian@gregory:~/c$
</screen>
</listitem>
</itemizedlist>

</para>

<section><title>new interpreter todo</title>
<para>
For UI support
<itemizedlist>
<listitem><para>Enhance StaticDeclaration to types (predefined types, typedefs)</para><para>
  -> done with DECL_TYPEDEF</para></listitem>

<listitem><para>Enhance StaticDeclaration to constants (Variables with constant value)</para><para>
  -> done with DECL_CONSTANT</para></listitem>

<listitem><para>Add &lt;Namespace&gt;::&lt;block&gt; to syntax
	UI::{...}</para><para>
  -> add c_namespace to SymbolEntry</para></listitem>

<listitem><para>Enhance StaticDeclaration to allow specification of namespace</para><para>
  -> done with DECL_NAMESPACE</para></listitem>

<listitem><para>Add enums to TypeCode</para><para>
	`opt (`hstretch|`vstretch)</para></listitem>

<listitem><para>Add constructed types to TypeCode</para><para>
	`Widget (`Label (string), ...)</para></listitem>

<listitem><para>Add constant definitions to TypeCode</para><para>
	define CurrentItem UI::CurrentItem
	so UI::Fun (..., CurrentItem, ...) evaluates CurrentItem in UI namespace</para></listitem>

<listitem><para>Allow namespace / module extensions</para></listitem>

<listitem><para>Properly support prototypes (separate declaration and definition)</para></listitem>

<listitem><para>Support 'external' functions (declaration in ycp, definition externally)</para></listitem>

<listitem><para>nested namespaces</para><para>
	UI::WFM::...</para></listitem>

<listitem><para>merge "module" (YCP namespace) and namespace (builtin namespace)</para></listitem>

</itemizedlist>
</para>
</section>
</section>

