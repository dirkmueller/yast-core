<!-- $Id$ -->
<chapter id="debugger-usage">
<title>Debugger</title>

<!--		usage			-->

<section>
<title>Usage</title>
<para>
<itemizedlist>

<listitem><para>The debugger is part of libycp. To use it, you must set the environment
variable <literal>Y2DEBUGGER</literal>. With a value of 1, the debugger opens the port
19743 and continues execution of the program. With a value of 2, the debugger
waits for the frontend to connect.</para></listitem>

<listitem><para>You can use <literal>telnet</literal> (<computeroutput>telnet machine 19473</computeroutput>) as a very
simple frontend or the ycpdebugger, a full features graphical qt frontend with
syntax highlighting.</para></listitem>

</itemizedlist>
</para>
</section>

<!--		commands		-->

<section>
<title>Commands</title>
<para>

<itemizedlist>

<listitem><para>interrupt</para>
<para>Interrupts the program. You can only interrupt the interpreter while it is
working. For example, you can not interrupt while the interpreter is waiting
for the return of a UserInput ().</para></listitem>

<listitem><para>continue</para>
<para>Resume program execution.</para></listitem>

<listitem><para>single</para>
<para>Execute a single YCP instruction.</para></listitem>

<listitem><para>step</para>
<para>Continues program execution until the current source line is left.</para></listitem>

<listitem><para>next</para>
<para>Continues program execution until the next YCP instruction on the same
level.</para></listitem>

<listitem><para>up</para>
<para>Continues program execution until the next YCP instruction on the next
higher level.</para></listitem>

<listitem><para>detach</para>
<para>Disconnect from the interpreter.</para></listitem>

<listitem><para>token</para>
<para>Prints token the actual interpreter is working on.</para></listitem>

<listitem><para>scope [#n]</para>
<para>Prints the entire definition scope of the actual interpreter or
the interpreter with the unique number #n.</para></listitem>

<listitem><para>print [#n] VARIABLE</para>
<para>Prints the value of the variable in the actual interpreter or
the interpreter with the unique number #n.</para></listitem>

<listitem><para>break FILENAME LINENUM</para>
<para>Set a breakpoint at line LINENUM in source file FILENAME.</para></listitem>

<listitem><para>clear FILENAME LINENUM</para>
<para>Delete breakpoint at line LINENUM in source file FILENAME.</para></listitem>

<listitem><para>list breakpoints</para>
<para>Prints a list of all breakpoints.</para></listitem>

<listitem><para>list interpreters</para>
<para>Prints a list of all interpreters.</para></listitem>

<listitem><para>set/unset option</para>
<para>Set or unset the option. Options are:

<itemizedlist>
<listitem><para>ignorescr</para>
<para>Don't debug calls to the scr interpreters. (on by default)</para></listitem>
<listitem><para>printtoken</para>
<para>Print the token at every stop. (off by default)</para></listitem>
</itemizedlist>
</para></listitem>

</itemizedlist>
</para>
</section>

<section>
<title>Example Session</title>

<para>
Suppose you want to debug the following short program:
</para>

<screen>

# ./y2bignfat test2.ycp qt

{
    list cpu = SCR(`Read(.probe.cpu));
    list hosts = SCR(`Read(.etc.hosts));

    UI(``{

        OpenDialog(`PushButton(&quot;Hello World!&quot;));
	UserInput();
	CloseDialog();

    });

    float pi = 3.141;
}

</screen>

<para>
So first we have to set Y2DEBUGGER and start y2bignfat:
</para>

<screen>
-&gt; export Y2DEBUGGER 2
-&gt; y2bignfat test2.ycp qt
waiting for debugger frontend to connect
</screen>

<para>
As you can see, the interpreter is waiting for the frontend to connect. We
will use telnet as a frontend:
</para>

<screen>
-&gt; telnet localhost 19473
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Welcome to the YCP debugger.
interpreter: #0 wfm 0
position: /suse/arvin/yast2/debugger/test2.ycp 0
</screen>

<para>
We are connected to the ycp debugger. The last line shows us the position in
the source code: filename and linenumber. Don't wonder about the linenumber of
0, it hasn't been initialized yet. The line above tells us which interpreter
is currently active: It is the wfm interpreter with the unique number 0.
</para>

<para>
First we want to get a listing of the source code:
</para>

<screen>
list source
BEGIN SOURCE

# ./y2bignfat test2.ycp qt

{
    list cpu = SCR(`Read(.probe.cpu));
    list hosts = SCR(`Read(.etc.hosts));

    UI(``{

        OpenDialog(`PushButton(&quot;Hello World!&quot;));
        UserInput();
        CloseDialog();

    });

    float pi = 3.141;
}

END SOURCE
</screen>

<para>
The source code is surrounded by <literal>BEGIN SOURCE</literal> / <literal>END SOURCE</literal>
lines. This is mainly to simplify parsing for (intelligent?) frontends. Now we
can step a bit through the code:</para>

<screen>
step
interpreter: #0 wfm 1
position: /suse/arvin/yast2/debugger/test2.ycp 5
step
interpreter: #0 wfm 1
position: /suse/arvin/yast2/debugger/test2.ycp 6
</screen>

<para>
In the qt frontend a green arrow points to the current line. Well, it's time
to see some variables:
</para>

<screen>
scope
BEGIN SCOPE
1 list cpu = [$[&quot;architecture&quot;:&quot;i386&quot;, &quot;baseclass&quot;:&quot;Internally Used Clas
END SCOPE
</screen>

<para>
The interpreter only knows about the variable <literal>cpu</literal>. The first number
tells us the level in which the variable is located. You can also see that the
output is truncated. This is done since those list can get very long. If you
want to see the complete variable, use the print command:
</para>

<screen>
print cpu
BEGIN VARIABLE
[$[&quot;architecture&quot;:&quot;i386&quot;, &quot;baseclass&quot;:&quot;Internally Used Class&quot;, &quot;bus&quot;:&quot;None&quot;, &quot;family&quot;:6, &quot;model&quot;:3, &quot;subclass&quot;:&quot;CPU&quot;, &quot;unique_key&quot;:&quot;9zuE.j8NaKXDZtZ6&quot;]]
END VARIABLE
</screen>

<para>
In the qt frontend, the variable is displayed in a separate window in a more
human readable style and with syntax highlighting.
</para>

<para>
Let's go on:
</para>

<screen>
step
interpreter: #0 wfm 1
position: /suse/arvin/yast2/debugger/test2.ycp 12
step
interpreter: #4 ui 0
position: /suse/arvin/yast2/debugger/test2.ycp 0
</screen>

<para>
Now the ui interpreter is active. It has the unique number 4. You can get a
list of all interpreters:
</para>

<screen>
list interpreters
BEGIN INTERPRETERS
#0 wfm
#1 scr
#2 scr
#3 scr
#4 ui
END INTERPRETERS
</screen>

<para>
Well, quite a lot of scr interpreters. But it's correct: Every scr path has
one interpreter (after it has been used) plus one interpreter for the main
ScriptingAgent.
</para>

<para>
Now let's set a breakpoint at line 16 and continue until it is reached:
</para>

<screen>
break /suse/arvin/yast2/debugger/test2.ycp 16
BEGIN BREAKPOINTS
/suse/arvin/yast2/debugger/test2.ycp 16
END BREAKPOINTS
continue
breakpoint reached
interpreter: #0 wfm 1
position: /suse/arvin/yast2/debugger/test2.ycp 16
</screen>

<para>
Setting breakpoints is much easier in the qt frontend: Just click with the
left mousebutton onto a line. Breakpoints are also marked with a red
sign. Note: If you set a breakpoint at a empty line, it will never be reached.
</para>

<screen>
continue
All interpreters finished, bye.
Connection closed by foreign host.
-&gt;
</screen>

<para>
That's all folks.
</para>

</section>

</chapter>

