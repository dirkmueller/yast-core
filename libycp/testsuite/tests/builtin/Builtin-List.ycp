
# ---------------------------------------------------------
#
#  Filename:	Builtin-List.ycp
#
#  Purpose:	test cases for all list builtins
#
# ---------------------------------------------------------


("** equality **")

([1, 2] == [1, 2])
([] == [])
([1, 2, 3] == [1, 2])
([1, 2] == [])
([] == [1, 2])


("** inequality **")

([1, 2] != [1, 2])
([] != [])
([1, 2, 3] != [1, 2])
([1, 2] != [])
([] != [1, 2])


("** foreach **")

{
    // foreach without a return
    integer sum = 0;
    foreach (integer i, [1, 2, 4], ``{
	sum = sum + i;
    });
    return sum;
}


("** find **")
{
    list<integer> m = [1];
    // The expression should return a boolean
    // But nil crashes y2base
    return find (integer i, m, ``( nil ));
}


("** prepend **")

(prepend ([1, 4], 8))
(prepend ([], 8))


("** sublist **")

(sublist (["a", "b", "c"], 0))
(sublist (["a", "b", "c"], 1))
(sublist (["a", "b", "c"], 2))

(sublist (["a", "b", "c"], 0, 0))
(sublist (["a", "b", "c"], 0, 1))
(sublist (["a", "b", "c"], 0, 3))
(sublist (["a", "b", "c"], 1, 1))
(sublist (["a", "b", "c"], 1, 2))
(sublist (["a", "b", "c"], 2, 0))
(sublist (["a", "b", "c"], 2, 1))


("** list::reduce **")

(list::reduce (integer x, integer y, [], { return x + y; })) // error: no initial value and empty list
(list::reduce (integer x, integer y, 0, [], { return x + y; }))
(list::reduce (integer x, integer y, [2, 4, 6], { return x + y; }))
(list::reduce (integer x, integer y, 0, [2, 4, 6], { return x + y; }))

(list::reduce (integer x, integer y, [], { return x * y; })) // error: no initial value and empty list
(list::reduce (integer x, integer y, 1, [], { return x * y; }))
(list::reduce (integer x, integer y, [2, 4, 6], { return x * y; }))
(list::reduce (integer x, integer y, 1, [2, 4, 6], { return x * y; }))

(list::reduce (term t, float f, `item(`id(`dummy)), [], { return add(t, tostring(f)); }))
(list::reduce (term t, float f, `item(`id(`dummy)), [3.14, 2.71], { return add(t, tostring(f)); }))

