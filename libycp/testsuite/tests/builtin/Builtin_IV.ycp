
# ---------------------------------------------------------
#
#  Filename:    Builtin_IV.ycp
#
#  Purpose:     test cases for YCP test
#
#  Creator:     jd@suse.de
#
#  Maintainer:  jd@suse.de
#
# ---------------------------------------------------------

# ---------------- added 1999/11/29 ---------------

//
//   toset(list l) -> list
//
// Scans a list for duplicates, removes them and sorts the list.
//

( toset([1,5,3,2,3,true,false,true]) == [false,true,1,2,3,5] )




//
//     setcontains(list l, any v) -> boolean
//
// Determines, if a certain value <tt>v</tt> is contained in
// a list <tt>l</tt>, but assumes that <tt>l</tt> is sorted. If <tt>l</tt> is
// not sorted, the result is undefined.
//

( setcontains([1,2,5], 2) == true )

//
//    tolower( string s ) -> string
//
// Returns a string that results from string<tt>s</tt> by
// converting each character tolower.


( tolower( "aBcDeF" ) == "abcdef" )


//
//    toascii( string s ) -> string
//
// Returns a string that results from string<tt>s</tt> by
// copying each character that is below 0x7F (127).
//
( toascii( "aÖBÄc" ) == "aBc" )
( toascii( "Special characters: !#$%&()*+,-./:;<=>?@[]^_`{}|~") == "Special characters: !#$%&()*+,-./:;<=>?@[]^_`{}|~" )



//
//     flatten(list(list(type)) l) -> list(type)
//
// Gets a list l of lists and creates a single list that is 
// the concatenation of all lists in l.
//

( flatten([ [1,2], [3,4] ]) == [1, 2, 3, 4] )
( flatten([ [1,[2,[3,[4]]]] ] ) == [1, [2, [3, [4]]]] )
( flatten([ [1], 2, [3,4] ]) == [1, 2, 3, 4] )

