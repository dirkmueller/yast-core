
# ---------------------------------------------------------
#
#  Filename:    Builtin10.ycp
#
#  Purpose:     test cases for YCP test
#
#  Creator:     jd@suse.de
#
#  Maintainer:  jd@suse.de
#
# ---------------------------------------------------------


// some sizes: for list, term and map the size-operator is already tested

( size( . ) == 0 )
( size( ._._._ ) == 3 )
( size( "" ) == 0 )
( size( "Hello World\n Hello World" ) == 24 )


// symbolof() already tested with terms


// For each element of the list the expression 
// is executed in a new context, where the variable
// is assigned to that value. The return value of the last execution of
// v is the value of the foreach construct.

{
   any   v = 0;

   return foreach( `v, [ 1, 2, 3 ], ``{ return v; } ) == 3;
}

{
   return foreach( `v, [ 1, 2, 3 ], ``{ return v; } ) == 3;
}



// For each element of the list l the expression v
// is executed in a new context, where the variable s
// is assigned to that value. If the expression evaluates to true under
// this circumstances, the value is appended to the result list.

{
   return filter( `v, [ 1, 2, 3, 5 ], ``( v>2 ) ) == [ 3, 5 ];
}

{
   return filter( `v, [ 1, 2, 3, 5 ], ``{ return v>2; } ) == [ 3, 5 ];
}

{
   list MyList = [ "Andreas", "Bert", "Charles", "Dean", "Eduard", "Fred" ];

   return filter(string v, MyList, ``( size( v ) > 4 ) ) == [ "Andreas", "Charles", "Eduard" ];
}



// Maps an operation onto all elements of a list and thus creates
// a new list.
// For each element of the list <tt>l</tt> the expression <tt>v</tt> 
// is evaluated in a new context, where the variable <tt>s</tt>
// is assigned to that value. The result is the list of those
// evaluations.

{
    return maplist(integer v, [1,2,3,5], ``(v + 1)) == [2,3,4,6];
}

