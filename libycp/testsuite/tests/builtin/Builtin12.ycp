
# ---------------------------------------------------------
#
#  Filename:    Builtin12.ycp
#
#  Purpose:     test cases for YCP test
#
#  Creator:     jd@suse.de
#
#  Maintainer:  jd@suse.de
#
# ---------------------------------------------------------

// Interprets two lists as sets and returns a new list that has
// all elements of the first list and all of the second list. Identical
// elements are dropped. The order of the elements in the new list is
// preserved. Elements of the first list are prior to elements from 
// the second list.

{
    list   SetOne = [ 0 , "Hello world", true ];
    list   SetEqual = [ select( SetOne, 2, nil), 7 * 0, "Hello " + "world" ];
    list   SetTwo = [ ., 15 % 5 ];
    list   SetDifferent = [ 3.00 ];
    list   ResultSet = [];

    ResultSet = union( SetOne, SetOne );
    return( ResultSet == SetOne );
}

{
    list   SetOne = [ 0 , "Hello world", true ];
    list   SetEqual = [ select( SetOne, 2, nil), 7 * 0, "Hello " + "world" ];
    list   SetTwo = [ ., 15 % 5 ];
    list   SetDifferent = [ 3.00 ];
    list   ResultSet = [];

    ResultSet = union( SetOne, SetEqual );
    return( ( ResultSet == SetOne ) &&
            ( ResultSet != SetEqual ) );
}

{
    list   SetOne = [ 0 , "Hello world", true ];
    list   SetEqual = [ select( SetOne, 2, nil), 7 * 0, "Hello " + "world" ];
    list   SetTwo = [ ., 15 % 5 ];
    list   SetDifferent = [ 3.00 ];
    list   ResultSet = [];

    ResultSet = union( SetOne, SetTwo );
    return( ResultSet == add( SetOne, select( SetTwo, 0, nil) ) );
}

{
    list   SetOne = [ 0 , "Hello world", true ];
    list   SetEqual = [ select( SetOne, 2, nil), 7 * 0, "Hello " + "world" ];
    list   SetTwo = [ ., 15 % 5 ];
    list   SetDifferent = [ 3.00 ];
    list   ResultSet = [];

    ResultSet = union( SetOne, SetDifferent );
    return( ResultSet == add( SetOne, select( SetDifferent, 0, nil) ) );
}

{
    list   SetOne = [ 0 , "Hello world", true ];
    list   SetEqual = [ select( SetOne, 2, nil), 7 * 0, "Hello " + "world" ];
    list   SetTwo = [ ., 15 % 5 ];
    list   SetDifferent = [ 3.00 ];
    list   ResultSet = [];

    ResultSet = union( SetDifferent, SetOne );
    return( ResultSet != add( SetOne, select( SetDifferent, 0, nil) ) );
}

{
    return( "test case union finished" );
}


