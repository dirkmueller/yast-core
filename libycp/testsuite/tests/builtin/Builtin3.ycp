
# ---------------------------------------------------------
#
#  Filename:    Builtin3.ycp
#
#  Purpose:     test cases for YCP test
#
#  Creator:     jd@suse.de
#
#  Maintainer:  jd@suse.de
#
# ---------------------------------------------------------

// Gets the i'th value of a list or term. The first value has the index 0.
// The call select([1,2,3], 1, nil) thus returns 2. Returns nil if the
// index is invalid.
// For a map, the returned value is a list of two values [key,value]

( select([1,2,3], 1, nil) == 2 )
{
    list  node1 = [ 1, 2 ];
    list  node2 = [ 3, 4 ];
    list  node3 = [ 5, 6 ];
    list  node4 = [ node2, node3 ];
    list  node5 = [ node1, node4 ];
    list  node6 = [ 7 ];
    list  node7 = [ node5, node6 ];

    return( select( node7, 0, nil) == node5 );
}

( true )   // see Notifications_II.ycp
( true )   // see Notifications_II.ycp

{
    list  node1 = [ 1, 2 ];
    list  node2 = [ 3, 4 ];
    list  node3 = [ 5, 6 ];
    list  node4 = [ node2, node3 ];
    list  node5 = [ node1, node4 ];
    list  node6 = [ 7 ];
    list  node7 = [ node5, node6 ];

    return( select( (list)select( node7, 0, nil ), 1, nil ) == node4 );
}

{
    list  node1 = [ 1, 2 ];
    list  node2 = [ 3, 4 ];
    list  node3 = [ 5, 6 ];
    list  node4 = [ node2, node3 ];
    list  node5 = [ node1, node4 ];
    list  node6 = [ 7 ];
    list  node7 = [ node5, node6 ];

    return( select( (list)select( (list)select( node7, 0, nil ), 1, nil ), 0, nil ) == node2 );
}

{
    list  node1 = [ 1, 2 ];
    list  node2 = [ 3, 4 ];
    list  node3 = [ 5, 6 ];
    list  node4 = [ node2, node3 ];
    list  node5 = [ node1, node4 ];
    list  node6 = [ 7 ];
    list  node7 = [ node5, node6 ];

    return( select( (list)select( (list)select( (list)select( node7, 0, nil ), 1, nil ), 1, nil ), 1, nil ) == 6 );
}

{
    list  node1 = [ 1, 2 ];
    list  node2 = [ 3, 4 ];
    list  node3 = [ 5, 6 ];
    list  node4 = [ node2, node3 ];
    list  node5 = [ node1, node4 ];
    list  node6 = [ 7 ];
    list  node7 = [ node5, node6 ];

    return( node7 );
}

{
    return( "test case select for lists finished" );
}

