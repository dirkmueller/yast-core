
# ---------------------------------------------------------
#
#  Filename:    Builtin2.ycp
#
#  Purpose:     test cases for YCP test
#
#  Creator:     jd@suse.de
#
#  Maintainer:  jd@suse.de
#
# ---------------------------------------------------------

// _debug for debugging is no longer tested because the results are now
// logged into a log file.


// Use this for debugging. It will dump a list of all macro 
// definitions to stderr.
// furthermore, comparison is tested, see also Compare.ycp
// Compares two values for equality. Returns true, if the are equal.
// Symbols are not equal, if one is quoted and the other not.
// Terms are equal, if their symbols are equal and all arguments are
// pairwise equal.

{
   integer comparison ( boolean maximum, integer Int1, integer Int2  )
      ``{
             if( maximum == true )
             {
                 if( Int1 >= Int2 ) return( Int1 );
                 else return ( Int2 );
             }
             else
             {
                 if( Int1 <= Int2 ) return( Int1 );
                 else return ( Int2 );
             }
         };

   integer maximum ( integer Int1, integer Int2 )
      ``{
             return( comparison( true, Int1, Int2 ));
         };

   integer minimum ( integer Int1, integer Int2 )
      ``{
             return( comparison( false, Int1, Int2 ));
         };

   return( ( maximum( 5, minimum( 7, 3 )) == 5 ) &&
           ( maximum( 5, 7 ) == maximum( 7, 5 )) &&
           ( minimum( 5, 7 ) == minimum( 7, 5 )));
}


// Compares two values for equality. Returns true, if the are equal.
// Symbols are not equal, if one is quoted and the other not.
// Terms are equal, if their symbols are equal and all arguments are
// pairwise equal.

// libycp[2] Equality on declaration types not yet implemented
// (( ``any == any ) == false )
//(( `any == any ) == false )
//(( any == `any ) == false )
// libycp[2] Equality on declaration types not yet implemented
// (( any == ``any ) == false )
// libycp[2] Equality on declaration types not yet implemented
//(( ``( ``any ) == ``any ) == false )


{
   integer comparison ( boolean maximum, integer Int1, integer Int2  )
      ``{
             if( maximum == true )
             {
                 if( Int1 >= Int2 ) return( Int1 );
                 else return ( Int2 );
             }
             else
             {
                 if( Int1 <= Int2 ) return( Int1 );
                 else return ( Int2 );
             }
         };

   integer maximum ( integer Int1, integer Int2 )
      ``{
             return( comparison( true, Int1, Int2 ));
         };

   integer minimum ( integer Int1, integer Int2 )
      ``{
             return( comparison( false, Int1, Int2 ));
         };

   return( ( maximum( 5, 7 ) != minimum( 5, 7 )) &&
           ( maximum( 7, 5 ) != minimum( 5, 7 )));
}

{
    return( "test cases for define finished" );
}


