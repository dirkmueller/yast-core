# author: visnov@suse.cz
#
# check deep bracket type checking

{
    list a = ["foo"];
    return ( a[0]:nil == "foo" );
}

{
    list a = ["foo"];
    return ( a["bar"]:"no" == "foo" ); // parse error, cannot index using string in a list
}

{
    list<string> a = ["foo"];
    
    string res = a[0]:nil;
    return ( res == "foo" ); 
}

{
    list<string> a = ["foo"];

    string res = a[0]:"";
    return ( res == "foo" ); 
}


{
    list<string> a = ["foo"];
    string res = a[0]:false; // parse error, default value does not match type
    return ( res == "foo" ); 
}


{
    list< map <string, boolean> > a = [ $[ "key" : true ] ];

    boolean res = a[0, "key"]:nil;
    return ( res == true ); 
}

{
    list< map <string, boolean> > a = [ $[ "key" : true ] ];

    boolean res = a[0, "key"]:false;
    return ( res == true ); 
}

{
    list< map <string, boolean> > a = [ $[ "key" : true ] ];

    boolean res = a[0, "key"]:""; // parse error, default value does not match type
    return ( res == true ); 
}

{
    list< map <string, boolean> > a = [ $[ "key" : true ] ];

    boolean res = a[0, 0]:false; // parse error, second index should be string
    return ( res == true ); 
}

{
    list< map > a = [ $[ "key" : true ] ];

    any res = a[0, 0]:nil; // ok, map does not provide types, but runtime error, resulting in "false"
    return ( res == nil ); 
}

{
    list< map > a = [ $[ "key" : true ] ];

    boolean res = a[0, 0]:false; // parse error, map does not provide types and default is NOT used for type determining
    return ( res == false ); 
}


{
    list< map > a = [ $[ "key" : true ] ];

    boolean res = (boolean) (a[0, 0]:false); // ok, map does not provide types, but runtime error, resulting in "false"
    return ( res == false ); 
}


{
    list< map > a = [ $[ "key" : true ] ];

    map res = a[0]:nil; // test a shorter index list
    return res == $[ "key" : true ] ; 
}


{
    list < term > a = [ `t ( 1, `b ) ];
    integer res = (integer) (a[0, 0]:-1);  // ok, for terms we cannot determine types
    return ( res == 1 );
}

{
    list< map > a = [ $[ "key" : true ] ];

    map res = a[0 + 1]:nil; // also test a function as a parameter type
    return res == nil ; 
}

{
    // type of the ternary operator
    list a = [ "foo" ];
    
    boolean cond = true;
    
    string res = a[ cond ? 0 : 1]:"";
    return res == "foo";
}
