
# ---------------------------------------------------------
#
#  Filename:    Compare.ycp
#
#  Purpose:     test cases for YCP test
#
#  Creator:     jd@suse.de
#
#  Maintainer:  jd@suse.de
#
# ---------------------------------------------------------

# comparisons
"void"
# void
(( nil == nil ) == true )

# boolean
"boolean"
((true == false) == false )
((true != false) == true )
((true == true) == true )
((false != false) == false )
(( true && false ) == false )
(( true || false ) == true )

# integer
"integer"
(( 42 == 42 ) == true )
(( 42 == -42) == false )
((-42 == -42) == true )
((-42 != 42 ) == true )
(((42 / 7 == 4 + 2 ) == (( 42 / 7 ) == (4 + 2))) == true )
(((42 / 7 <  4 + 2 ) == (( 42 / 7 ) <  (4 + 2))) == true )
(((42 / 7 >  4 + 2 ) == (( 42 / 7 ) >  (4 + 2))) == true )
(((42 / 7 <= 4 + 2 ) == (( 42 / 7 ) <= (4 + 2))) == true )
(((42 / 7 >= 4 + 2 ) == (( 42 / 7 ) >= (4 + 2))) == true )

# float
"float"
(((0.0-4.2) != 42.0e-1 ) == true )
((100.0 == 1.0e10 * 10.0e-9) == true )
(( 42.0 >  4.2e1 ) == false )
(( 42.0 >= 4.2e1 ) == true )
(( 42.0 <  4.2e1 ) == false )
(( 42.0 <= 4.2e1 ) == true )
(( 42.0 == 4.2e1 ) == true )
(( 42.0 != 4.2e1 ) == false )

# strings
"string"
(( "größer" < "kleiner" ) == true )
(( "gr\366\377er" < "kleiner" ) == true )
(( "größer" <= "kleiner" ) == true )
(( "größer" > "kleiner" ) == false )
(( "klein"  > "kleiner" ) == false )
(( "klein"  >= "kleiner" ) == false )
(( "klein"  == "kleiner" ) == false )
(( "Klein"  == "Klein" ) == true )
(( "Klein"  != "Klein" ) == false )
(( "Klein"  == "klein" ) == false )
((( "string" + 100 ) == "string100" ) == true )
((( "string" + .path ) == "string.path" ) == true )

# paths
"path"
(((. + .current + .path) == .current.path ) == true )
(((. + .current + .path) == .current.path ) != false )

# locale
# change within locale: the string is now a constant
# not tested any longer --> moved to unsolved

# list
"list"
(( [ "composed string", nil ] == [ "composed " + "string", { integer number = 5; } ] ) == true )
(( [ "composed string", nil ] != [ "composed " + "string", { integer number = 5; } ] ) == false )

#list comparison   added by tom@suse.de
(( [ ] == [ ] ) == true )
(( [ 1 ] == [ 1 ] ) == true )
(( [ 1 ] != [ 2 ] ) == true )
(( [ 1, 2, 3 ] > [ 1, 2 ] ) == true )
(( [ 1, 2 ] > [ 1, 1, 1 ] ) == true )
(( [ 1, "string" ] > [ 1, 1, 1 ] ) == true )
(( [ 1, "string_long" ] > [ 1, "string", 1 ] ) == true )
(( [ 1 ] < [ { integer number = 2; return number; } ] ) == true )
(( [ 1 ] > [ { integer number = 2; } ] ) == true )

# term
# there is already a test within D_DefineTerm.ycp
"term"
# term comparison    added by tom@suse.de
(( `alpha() == `alpha() ) == true )
(( `alpha() < `alpha( 1 ) ) == true )
(( `alpha( 1 ) == `alpha( 1 ) ) == true )
(( `alpha( 1 ) < `beta( 1 ) ) == true )
(( `alpha( 1 ) < `alpha( 2 ) ) == true )
(( `alpha( 1 ) < `alpha( 1, 1 ) ) == true )
(( `alpha( 1 ) < `alpha( 1, "string" ) ) == true )
(( `alpha( 1 ) < { term b = `beta( 1 ); return b; } ) == true )
(( `alpha( 1 ) > { term b = `beta( 1 ); } ) == true )

# map comparison     added by tom@suse.de
"map"
(( $[] == $[] ) == true )
(( $[ "a":1 ] == $[ "a":1 ] ) == true )
(( $[ "a":1 ] > $[] ) == true )
(( $[ "a":1, "b":2 ] < $[ "a":1, "b":3 ] ) == true )
(( $[ "a":1, "c":2 ] > $[ "a":1, "b":3 ] ) == true )
(( $[ "a":1, "b":2 ] > $[ "z":9 ] ) == true )


#Locale comparison     added by tom@suse.de
"locale"
{ textdomain "locale"; return ( _("a") < _("b") ); }
{ textdomain "locale"; return ( _("a") < _("aa") ); }
{ textdomain "locale"; return ( _("") < _("a") ); }
