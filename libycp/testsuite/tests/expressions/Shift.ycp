# ---------------------------------------------------------
#
#  Filename:    Shift.ycp
#
#  Purpose:     test cases for YCP shift operators << and >>
#
#  Creator:     msvec@suse.cz
#		mvidner@suse.cz
#
#  Maintainer:  msvec@suse.cz
#
# --------------------------------------------------------

((123<<1) == 246)
((123>>1) == 61)

// And unusual shift amounts?
( (123 << 0) == 123 )
( (123 >> 0) == 123 )
// When either operand is negative,
// the result is undefined according to the C standard.
/*
( -123 << 1 )
( -123 >> 1 )
( 123 << -1 )
( 123 >> -1 )
*/

// 62 is the max shift count.
// We don't compare the following two values,
// because they could be both zero if we accidentally have
// smaller integer size.
( 1 << 62 )
( 0x4000000000000000 )
//  fedcba9876543210 <- digit count

// When an overflow occurs, it is undefined too.
// This would overflow into the sign bit
// ( 1 << 63 )

( (0x4000000000000000 >> 62) == 1 )
( (0x7fffffffffffffff >> 62) == 1 )


// Now for precedence ;-)
// in C, additive operators bind tighter...
// 1 << 7 - 1
( (10 << 2 + 1) == 80 )
( (10 >> 2 - 1) == 5 )
// boom.
