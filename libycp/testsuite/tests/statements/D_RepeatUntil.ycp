
# ---------------------------------------------------------
#
#  Filename:    D_RepeatUntil.ycp
#
#  Purpose:     test cases for YCP test
#
#  Creator:     jd@suse.de
#
#  Maintainer:  jd@suse.de
#
# ---------------------------------------------------------

"NON-TERMINAL repeat_until"
# NON-TERMINAL repeat_until
#
# parsevalue -> YCP_Block -> { statement_list } ->
#                         -> { statement_list YCP_Statement } ->
#                         -> { statement_list YCP_Statement YCP_Statement } ->
#                         -> { YCP_Statement YCP_Statement YCP_Statement } ->
#                         -> { YCP_Statement repeat_until YCP_Statement }
#
#        repeat_until -> repeat YCP_Block until ( expression ) ;
#

// test of continue within a repeat-loop
{
  integer Symbol0032 = 0;

  repeat
  {
     if( Symbol0032 == 6 ) 
     {
         Symbol0032 = Symbol0032 + 1;
         continue;
     }
     else if( Symbol0032 == 7 ) break;

     Symbol0032 = Symbol0032 + 1;
  }
  until( Symbol0032 >= 10 );

  return Symbol0032 ; 
}

// break jumps up one block
{
  integer Symbol0033 = 0;
  integer Symbol0034 = 0;

  while( Symbol0033 < 10 )
  {
     repeat
     {
         if( Symbol0034 == 0 ) break;
         Symbol0033 = 20 ;   // this place is never reached because of the break

         Symbol0034 = Symbol0034 + 1;
     }
     until( Symbol0034 >= 10 );

     if( Symbol0033 == 7 ) break;

     Symbol0033 = Symbol0033 + 1;
  }

  return Symbol0033 ;
}

// return of the inner loop assigns a value, therefore this result gets
// also squared !
{
  integer Symbol0037 = 0;
  integer Symbol0038 = 0;

  repeat
  {
      Symbol0037 = {
                       repeat
                       {
                           if( Symbol0038 == 7 ) return Symbol0038 ;
                           Symbol0038 = Symbol0038 + 1;
                       }
                       until( Symbol0038 >= 10 );

                       return Symbol0038 ;
                   };

      if( Symbol0037 == 7 ) return Symbol0037 * Symbol0037;

      Symbol0037 = Symbol0037 + 1;       // to avoid infinite loops
  }
  until( Symbol0037 >= 10 );

  return Symbol0037 ;
}

// test for the simplest case
{
  integer Symbol0040 = 0;
  integer Symbol0039 = 0;

  define integer recursive( integer number )
     ``{
             if( 0 == number ) return 0;
             else return( number + recursive( number - 1 ) );
         };

  repeat
  {
      Symbol0039 = recursive( Symbol0040 );
      Symbol0040 = Symbol0040 + 1;
  }
  until( Symbol0039 > 100 );

  return( Symbol0040 );
}

