Parsed:
----------------------------------------------------------------------
{
    // map m
    // map m1
    // integer i
    // filename: "tests/statements/BracketAssign.ycp"
    map m = $[1:11, "a":"aa", `b:`bb];
    map m1 = m;
    integer i = 12;
    m[1] = i;
    i = 13;
    return (m != m1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // map m
    // map m1
    // integer i
    // filename: "tests/statements/BracketAssign.ycp"
    map m = $[1:11, "a":"aa", `b:`bb];
    map m1 = eval (m);
    integer i = 12;
    m[1] = i;
    i = 13;
    return (m != m1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // map m
    // map m1
    // filename: "tests/statements/BracketAssign.ycp"
    map m = $[1:11, "a":"aa", `b:`bb];
    map m1 = $[1:11, 2:12, "a":"aa", `b:`bb];
    m[2] = 12;
    return (m == m1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // list l
    // list l1
    // filename: "tests/statements/BracketAssign.ycp"
    list l = [1, "a", `b];
    list l1 = [1, 2, `b];
    l[1] = 2;
    return (l == l1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // list l
    // list l1
    // filename: "tests/statements/BracketAssign.ycp"
    list l = [1, "a", `b];
    list l1 = [1, "a", `b, 33];
    l[3] = 33;
    return (l == l1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // list l
    // list l1
    // filename: "tests/statements/BracketAssign.ycp"
    list l = [1, "a", `b];
    list l1 = [1, "a", `b, nil, nil, nil, nil, nil, 33];
    l[8] = 33;
    return (l == l1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // list l
    // list l1
    // map m
    // map m1
    // filename: "tests/statements/BracketAssign.ycp"
    list l = [1, "a", `b];
    list l1 = [1, 11, `b];
    map m = $[1:l, "a":l, `b:l];
    map m1 = $[1:l, "a":l1, `b:l];
    m["a", 1] = 11;
    return (m == m1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // list l
    // list l1
    // map m
    // map m1
    // filename: "tests/statements/BracketAssign.ycp"
    list l = [1, "a", `b];
    list l1 = [2, "b", `c];
    map m = $[1:l, "a":l, `b:l];
    map m1 = $[1:l, "a":l1, `b:l];
    m["a"] = [2, "b", `c];
    return (m == m1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // list l
    // map m
    // map m1
    // filename: "tests/statements/BracketAssign.ycp"
    list l = [1, "a", `b];
    map m = $[1:l, "a":l, `b:l];
    map m1 = $[1:l, "a":l, "b":"This is b", `b:l];
    m["b"] = "This is b";
    return (m == m1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // term l
    // term l1
    // filename: "tests/statements/BracketAssign.ycp"
    term l = `t (1, "a", `b);
    term l1 = `t (1, 2, `b);
    l[1] = 2;
    return (l == l1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // term l
    // term l1
    // filename: "tests/statements/BracketAssign.ycp"
    term l = `t (1, "a", `b);
    term l1 = `t (1, "a", `b, 33);
    l[3] = 33;
    return (l == l1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // term l
    // term l1
    // filename: "tests/statements/BracketAssign.ycp"
    term l = `t (1, "a");
    term l1 = `t (1, `n (2, `b));
    l[1] = `n (2, `b);
    return (l == l1);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
    // map m
    // filename: "tests/statements/BracketAssign.ycp"
    map m = $["a":"A"];
    m["b"] = {
    m["c"] = "C";
    return "B";
}
;
    return m;
}
----------------------------------------------------------------------
