#------------------------------------------------
#
# get all *.ycp below tests/$subdir
#

proc get-files { srcdir subdir extension } {
  if [catch {set filenames [list "$srcdir/$subdir/$CASE.$extension"] }] {
    # get all files matching $srcdir/$subdir/*.$extension
    set filenames [lsort [glob $srcdir/$subdir/*.$extension]]
  }
#  print "$srcdir$subdir: $filenames"
  return $filenames
}


#------------------------------------------------
#
# run a ycp file
#
proc ycp-run { src dir } {

  set path [split $src "/"]
  set srcfilename [lindex $path [expr [llength $path]-1]]
  set srcdirname [lindex $path [expr [llength $path]-2]]

  # extract basename and check extension

  set fname [split $srcfilename "."]

  if {[llength $fname] < 2} {
    fail "Bad filename syntax '$src'"
    return -1
  }
  if {[lindex $fname [expr [llength $fname]-1]] != "ycp"} {
    fail "Not .ycp extension '$src'"
    return -1
  }

  # setup filenames

  # $src is the name of the original testfile with absolute path
  # $dir/$srcfilename is the name of the original testfile with relative path,
  #                 relative to the testsuite directory
  set test_input "$dir/$srcfilename"

  set base_name [lindex $fname 0]

  set stdout_name "$dir/$base_name.out"
  set stderr_name "$dir/$base_name.err"
  set tmpout_name "tmp.out.$base_name"
  set tmperr_name "tmp.err.$base_name"

  puts -nonewline "."
  flush stdout
#  puts "Checking $base_name"

  # run the test

  set result ""
  set oops [catch { set result [exec "./runtest.sh" "$test_input" "$tmpout_name" "$tmperr_name" ] } catched]

  if {$oops != 0} {
    puts ""
    fail "test case failed for $srcdirname/$base_name: $catched"
    return -1
  }

  # check return code from runycp

  if {$result != ""} {
    puts ""
    warning "Running of $srcdirname/$base_name results in '$result'"
    return -1
  }

  # my tcl skills suck
  set should_fail0 [grep "xfail" "^$base_name\$"]
  set should_fail [expr 0 == [string match $should_fail0 ""]]

  # check stdout

  if {[diff $stdout_name "tmp.out.$base_name"] != 1} {
      set msg "Wrong stdout for $srcdirname/$base_name"
      if {$should_fail} {
	  xfail $msg
      } else {
	  puts ""
	  fail $msg
      }
      return -1
  }

  # check stderr

  if {[diff $stderr_name "tmp.err.$base_name"] != 1} {
      set msg "Wrong stderr for $srcdirname/$base_name"
      if {$should_fail} {
	  xfail $msg
      } else {
	  puts ""
	  fail $msg
      }
      return -1
  }

  # ok, all is fine

  if {$should_fail} {
      xpass $base_name
  } else {
      pass $base_name
  }

  return 0
}

#------------------------------------------------
#
# run a bytecode file
#
proc bytecode-run { src dir } {

  set path [split $src "/"]
  set srcfilename [lindex $path [expr [llength $path]-1]]
  set srcdirname [lindex $path [expr [llength $path]-2]]

  # extract basename and check extension

  set ycpname [split $srcfilename "."]

  if {[llength $ycpname] < 2} {
    fail "Bad filename syntax '$src'"
    return -1
  }
  if {[lindex $ycpname [expr [llength $ycpname]-1]] != "ycp"} {
    fail "Not .ycp extension '$src'"
    return -1
  }

  # setup filenames

  # $src is the name of the original testfile with absolute path
  # $dir/$srcfilename is the name of the original testfile with relative path,
  #                 relative to the testsuite directory
  set test_input "$dir/$srcfilename"

  set base_name [lindex $ycpname 0]
  set err_name "$dir/$base_name.err"
  set out_name "$dir/$base_name.out"
  set ybc_name "$dir/$base_name.ybc"
  set log_name "$dir/$base_name.log"
  set tmpout_name "tmp.out.$base_name"
  set tmpybc_name "tmp.ybc.$base_name"
  set tmperr_name "tmp.err.$base_name"

  set should_fail0 [grep "xfail" "^$base_name\$"]
  set should_fail [expr 0 == [string match $should_fail0 ""]]

#  puts "Compiling $srcdirname/$base_name"
  puts -nonewline "."
  flush stdout

  # compile the test

  set result ""
  set oops [catch { set result [exec "./runc" "-q" "-I" "$dir/../Include" "-M" "$dir/../Module" "-c" "-l" "$tmperr_name" "-o" "$ybc_name" "$test_input" ] } catched]

  if {$oops != 0} {
#    if {$result != ""} {
        puts ""
	fail "run-compilation failed for $srcdirname/$base_name ($oops:$result): $catched"
	return 1
#    } else {
#	return 0
#    }
  }

  # check return code from runc

  if {$result != ""} {
    set msg "run-Compilation of $srcdirname/$base_name results in '$result'"
    if {$should_fail} {
      xfail $msg
    } else {
      puts ""
      fail $msg
    }
    return 1
  }

  # print the test

  set result ""
  # FIXME: log is to /dev/null !!!
  set oops [catch { set result [exec "./runc" "-q" "-I" "$dir/../Include" "-M" "$dir/../Module" "-p" "-o" "$tmperr_name" "-l" "/dev/null" "$ybc_name" ] } catched]

  if {$oops != 0} {
    set msg "running failed for $srcdirname/$base_name: $catched"
    if {$should_fail} {
      xfail $msg
    } else {
      puts ""
      fail $msg
    }
    return 1
  }

  # check return code from runc

  if {$result != ""} {
    puts ""
    fail "Print of $srcdirname/$base_name results in '$result'"
    return 1
  }

  if {[diff $err_name $tmperr_name] != 1} {
      puts ""
      fail "Wrong print for $srcdirname/$base_name ($err_name vs. $tmperr_name)"
      return -1
  }
  
#  puts -nonewline "Interpreting $srcdirname/$base_name                   \r"
#  flush stdout

  # run the test

  set result ""
  # FIXME: log is to /dev/null !!!
  set oops [catch { set result [exec "./runc" "-q" "-I" "$dir/../Include" "-M" "$dir/../Module" "-o" "$tmpout_name" "-l" "/dev/null" "$ybc_name" ] } catched]

  if {$oops != 0} {
    puts ""
    fail "running failed for $srcdirname/$base_name: $catched"
    return -1
  }

  # check return code from runc

  if {$result != ""} {
    puts ""
    set msg "Run of $srcdirname/$base_name results in '$result'"
    if {$should_fail} {
      xfail $msg
    } else {
      fail $msg
    }
    return -1
  }

  if {[diff $out_name $tmpout_name] != 1} {
      puts ""
      fail "Wrong result for $srcdirname/$base_name ($out_name vs. $tmpout_name)"
      return -1
  }
  
  pass $base_name

  return 0
}


#------------------------------------------------
#
# compile a file into a bytecode
#
proc bytecode-compile { src dir } {

  set path [split $src "/"]
  set srcfilename [lindex $path [expr [llength $path]-1]]
  set srcdirname [lindex $path [expr [llength $path]-2]]

  # extract basename and check extension

  set ycpname [split $srcfilename "."]

  if {[llength $ycpname] < 2} {
    fail "Bad filename syntax '$src'"
    return -1
  }
  if {[lindex $ycpname [expr [llength $ycpname]-1]] != "ycp"} {
    fail "Not .ycp extension '$src'"
    return -1
  }

  # setup filenames

  # $src is the name of the original testfile with absolute path
  # $dir/$srcfilename is the name of the original testfile with relative path,
  #                 relative to the testsuite directory
  set test_input "$dir/$srcfilename"

  set base_name [lindex $ycpname 0]
  set ybc_name "$dir/$base_name.ybc"
  set tmpout_name "tmp.out.$base_name"
  set tmpybc_name "tmp.ybc.$base_name"
  set tmperr_name "tmp.err.$base_name"

  set should_fail0 [grep "xfail" "^$base_name\$"]
  set should_fail [expr 0 == [string match $should_fail0 ""]]

#  puts -nonewline "Compiling $srcdirname/$base_name                   \r"
#  flush stdout

  # compile the test

  set result ""
  set oops [catch { set result [exec "./runc" "-q" "-I" "$dir/../Include" "-M" "$dir/../Module" "-c" "-l" "$tmperr_name" "-o" "$ybc_name" "$test_input" ] } catched]

  if {$oops != 0} {
    fail "compilation failed for module $srcdirname/$base_name: $oops: $catched"
    return -1
  }

  # check return code from runc

  if {$result != ""} {
    set msg "Compilation of $srcdirname/$base_name results in '$result'"
    if {$should_fail} {
      xfail $msg
    } else {
      fail $msg
    }
    return -1
  }

  pass $base_name

  return 0
}

