/**
 * File:    DemoBrowser.ycp
 * Summary: Browses/Executes ycp examples
 * Authors: abauer@suse.de
 *
 * $Id$
 */

{
    /*
     * Do a fulltext search on all ycp files in a directory and return a list of filenames.
     */
    define list GetFileList( string dir, string match ) ``{
        list filelist = sort(
            filter(
                `file,
                SCR::Read( .target.dir, dir ),
                ``( regexpmatch( file, ".*\.ycp$" ) )
            )
        );

        if( match == "" ) return filelist;

        filelist = filter(
                `fname,
                filelist,
                ``( regexpmatch( SCR::Read( .target.string, fname ), match ) )
                );
        return filelist;
    }
    //TODO: write agent
    //Read current directory contents, filter out non-ycp files and sort it

    term browser =
      `VBox(
          `HSpacing( 30 ),
          `ReplacePoint(
              `id( `rp_file ),
              `SelectionBox( `id( `sb_file ), `opt( `notify ), "Select &YCP File:", GetFileList( ".", "" ) )
              ),
          `HBox(
              `HSpacing( 0.5 ),
              `Frame( "Search",
                  `VBox(
                      `InputField( `id( `te_search ), "Search &term:" ),
                      `Left( `CheckBox( `id( `cb_search_fn ), "Search in file&names" ) ),
                      `Left( `CheckBox( `id( `cb_search_text ), "Search &file contents" ) ),
                      `Left( `CheckBox( `id( `cb_highlight ), "&Highlight match" ) ),
                      `Right( `PushButton( `id( `btn_search ), "&Search..." ) )
                       )
                    )
              ),
          `VSpacing( 0.1 )
           );

    term edit =
        `VBox(
              `Left( `Label( "Sourcecode" ) ),
              `RichText( `id( `rt_source ), "" ),
              `VSquash(
                       `HBox(
                             `VSpacing( 8.4 ),
                             `VBox(
                                   `Left( `Label( "y2log") ),
                                   `RichText( `id( `rt_log ), "" )
                                  )
                            )
                      ),
              `HBox(
                    `Left( `PushButton( `id( `btn_clear_log ), "&Clear Log Window" ) ),
                    `HWeight( 1, `HStretch() ),
                    `Right( `PushButton( `id( `btn_run_ncurses ), "Run (ncurses)" ) ),
                    `Right( `PushButton( `id( `btn_run_qt ), "Run (Qt)" ) ),
                    `Right( `PushButton( `id( `btn_quit ), "&Quit" ) )
                   )
             );

    UI::OpenDialog( `opt( `defaultsize ),
            `HBox(
                  `HSquash( browser ),
                  edit
                 )
       );


    repeat {
        symbol sender = UI::UserInput();

        string content = nil;

        if( sender == `btn_search ) {
            string match = UI::QueryWidget( `id( `te_search ), `Value );

            list fl = GetFileList( ".", match );

            UI::ReplaceWidget( `id( `rp_file ), `SelectionBox(
                                                    `id( `sb_file ),
                                                    `opt( `notify ),
                                                    "Select &YCP File:",
                                                    fl
                                                )
                    );
            continue;
        }

        if( sender == `sb_file ) {
            string file = UI::QueryWidget( `id( `sb_file ), `CurrentItem );

            content = SCR::Read( .target.string, file );
            content = "<pre>"+content+"</pre>";

            UI::ChangeWidget( `id( `rt_source ), `Value, content );
            continue;
        }

        if( sender == `btn_run_qt ) {
            string cmd = "/usr/lib/YaST2/bin/y2base "+UI::QueryWidget( `id( `sb_file ), `CurrentItem )+" qt";
            SCR::Execute( .target.bash, cmd );
        }

        if( sender == `btn_run_ncurses ) {
            string cmd = "xterm -e /usr/lib/YaST2/bin/y2base "+UI::QueryWidget( `id( `sb_file ), `CurrentItem )+" ncurses";
            SCR::Execute( .target.bash, cmd );
        }

    } until( sender == `btn_quit );

    UI::CloseDialog();
}
