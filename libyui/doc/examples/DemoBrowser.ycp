{
    //TODO: write agent
    //Read current directory contents, filter out non-ycp files and sort it
    list dir = sort( 
            filter( 
                `file, 
                SCR::Read( .target.dir, "." ), 
                ``( regexpmatch( file, ".*\.ycp$" ) ) 
            ) 
        );
     
    term browser = 
      `VBox(
          `HSpacing( 30 ),
          `SelectionBox( `id( `sb_file ), `opt( `notify ), "Select &YCP File:", dir ),
          `HBox(
              `HSpacing( 0.5 ), 
              `Frame( "Search",
                  `VBox(
                      `TextEntry( `id( `te_search ), "Search &term:" ),
                      `Left( `CheckBox( `id( `cb_search_fn ), "Search in file&names" ) ),
                      `Left( `CheckBox( `id( `cb_search_text ), "Search file &contents" ) ),
                      `Left( `CheckBox( `id( `cb_highlight ), "&Highlight match" ) ),
                      `Right( `PushButton( `id( `btn_search ), "&Search..." ) )
                       )
                    )
              ),
          `VSpacing( 0.1 )
           );

    term edit =
        `VBox(
              `RichText( `id( `re_source ), "" ),
              `HBox(
                    `Left( `PushButton( `id( `btn_run_ncurses ), "Run (ncurses)" ) ),
                    `Left( `PushButton( `id( `btn_run_qt ), "Run (Qt)" ) ),
                    `HWeight( 1, `HStretch() ),
                    `Right( `PushButton( `id( `btn_quit ), "&Quit" ) )
                   )
             );

    UI::OpenDialog( `opt( `defaultsize ),
            `HBox(
                  browser,
                  `HWeight( 1, edit )
                 )
       );


    repeat {
        symbol sender = UI::UserInput();
        
        string content = nil;

        if( sender == `btn_search ) {
            //TODO: search function
            UI::OpenDialog( 
                    `VBox (
                           `Label( "Search not implemented yet, sorry." ), 
                           `PushButton( "&Ok" ) 
                          )
                    );
            UI::UserInput();
            UI::CloseDialog();
            continue;
        }

        if( sender == `sb_file ) {
            string file = UI::QueryWidget( `id( `sb_file ), `CurrentItem );
            
            content = SCR::Read( .target.string, file );
            content = "<code><pre>"+content+"</pre></code>";
            
            UI::ChangeWidget( `id( `re_source ), `Value, content );
            continue;
        }

        if( sender == `btn_run_qt ) {
            string cmd = "/usr/lib/YaST2/bin/y2base "+UI::QueryWidget( `id( `sb_file ), `CurrentItem )+" qt";
            SCR::Execute( .target.bash, cmd );
        }

        if( sender == `btn_run_ncurses ) {
            string cmd = "xterm -e /usr/lib/YaST2/bin/y2base "+UI::QueryWidget( `id( `sb_file ), `CurrentItem )+" ncurses";
            SCR::Execute( .target.bash, cmd );
        }
        
    } until( sender == `btn_quit );

    UI::CloseDialog();
}
