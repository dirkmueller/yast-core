/*
 * stupid puzzle
 * $Id$
 */

{
    textdomain "base";
    
integer line_len = 4;

  define void DebugDialog(any str) ``{
    UI::OpenDialog(`VBox(`RichText(sformat("%1",str)),`PushButton(_("&OK"))));
    any r = UI::UserInput();
    UI::CloseDialog();
  };


define term buttons_table (list<string> buttons) ``{

    term tabl = `VBox ();
    term line = `HBox ();
    
    integer i = 0;
    integer j = 0;
    string label = "";
    
    while ((i + line_len - 1) < size (buttons)) {
	
	j    = 0;
	line = `HBox ();
	    
	while (j < line_len) {
	    
	    label = buttons[i + j]:"";
	    
	    if (size (label) > 0)
		line = add (line, `ReplacePoint (`id(sformat ("rp%1", i + j)), `PushButton (`id (i + j), label)));
	    else
		line = add (line, `ReplacePoint (`id (sformat ("rp%1", i + j)), `HStretch ()));
	    
	    j = j + 1;
	}
	
	tabl = add (tabl, line);
	
	i = i + j;
    }
 
    return tabl;
    
}

define boolean isRight (list buttons, integer pos) ``{
    if (pos + 1 < size (buttons))
	return buttons[pos + 1]:"" == "";
    return false;
}

define boolean isLeft (list buttons, integer pos) ``{
    if (pos - 1 >= 0)
	return buttons[pos - 1]:"" == "";
    return false;
}

define boolean isDown (list buttons, integer pos) ``{
    if (pos + line_len < size (buttons))
	return buttons[pos + line_len]:"" == "";
    return false;
}

define boolean isUp (list buttons, integer pos) ``{
    if (pos - line_len >= 0)
	return buttons[pos - line_len]:"" == "";
    return false;
}

/*
 * do the move
 */

define list<string> move (list<string> buttons, integer pos, integer m) ``{

    list<string> ret  = [];
    integer i = 0;

    while (i < size (buttons)) {
	
	if (i == pos)
	    ret[size(ret)] = buttons[i + m]:nil;
	else if (i == pos + m)
	    ret[size(ret)] = buttons[i - m]:nil;
	else
	    ret[size(ret)] = buttons[i]:nil;
	
	i = i + 1;
	
    }

    UI::ReplaceWidget (`id(sformat ("rp%1", pos)), `HStretch ());
    UI::ReplaceWidget (`id(sformat ("rp%1", pos + m)), `PushButton (`id (pos + m), buttons[pos]:nil));


    return ret;
}

/*
 * generate list of buttons
 * TODO: needs to be randomized
 */
define list<string> generate_buttons (integer space) ``{

    list<string>    buttons  = [];
    integer i        = 1;
    
    while (i <= line_len * line_len) {
	
	if (i == space)
	    buttons[size(buttons)] = "";
	else {
	    if (i < space)
		buttons[size(buttons)] = sformat ("%1", i);
	    else
		buttons[size(buttons)] = sformat ("%1", i - 1);
	}
	
	i = i + 1;

    }

    return buttons;
}


define void PuzzleWindow(list<string> buttons) ``{
	
	
    UI::OpenDialog (`HBox (
	`HSpacing (3),
	`VBox (
	    `VSpacing (),
	    `Frame (_("Puzzle"), buttons_table (buttons)),
	    `VSpacing (5),
	    `PushButton (`id (`quit), _("&Quit"))),
	`HSpacing ())
	);
    
    any ui = nil;
	
    repeat {
	
	ui = UI::UserInput();

	if (is (ui, integer)) {

  	    if      (isLeft (buttons, (integer) ui))  buttons = move (buttons, (integer) ui, -1);
  	    else if (isRight (buttons,(integer)  ui)) buttons = move (buttons, (integer) ui, 1);
  	    else if (isUp (buttons, (integer) ui))    buttons = move (buttons, (integer) ui, -line_len);
  	    else if (isDown (buttons, (integer) ui))  buttons = move (buttons, (integer) ui, line_len);
	}
	

    } until (ui == `cancel || ui == `quit);

    UI::CloseDialog();
	
}

    

// ==== main

// define this global variable to provide nxn puzzle table

// create buttons with space at num
list<string> buttons  = generate_buttons (5);

// play puzzle		
PuzzleWindow (buttons);
    
}
