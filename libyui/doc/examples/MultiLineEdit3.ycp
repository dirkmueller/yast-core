UI::{
    // Build dialog with MuliLineEdit widget,
    // a character counter for the MuliLineEdit's contents as they are typed
    // and an OK button.
    OpenDialog(
	       `VBox(
		     `MultiLineEdit(`id(`problem),
				    `opt(`notify), // make UserInput() return on every keystroke
				    "Problem &description:" ),
		     `HBox(
			   `Label("Number of characters entered:"),
			   `Label(`id(`char_count), "0   ")
			   ),
		     `PushButton(`id(`ok), "&OK")
		     )
	       );

    any ret = nil;

    do
    {
	// Wait for user input.
	//
	// Since the MultiLineEdit is in "notify" mode, it, too, will cause
	// UserInput() to return upon any single character entered.
	ret = UserInput();

	if ( ret == `problem )	// User typed some text
	{
	    // Set the `char_count label to the number of characters entered
	    // into the MultiLineEdit widget.
	    
	    ChangeWidget(`id(`char_count), `Value,
			 sformat( "%1", size( QueryWidget(`id(`problem), `Value) ) ) );
	}
    } while ( ret != `ok );

    // Get the input from the MultiLineEdit.
    //
    // Notice: The return value of UserInput() does NOT return this value!
    // Rather, it returns the ID of the widget (normally the PushButton)
    // that caused UserInput() to return.
    string input=QueryWidget(`id(`problem), `Value);
    
    // Close the dialog.
    // Remember to read values from the dialog's widgets BEFORE closing it!
    CloseDialog();

    // Pop up a new dialog to echo the input.
    OpenDialog(
	       `VBox(
		     `Label("You entered:"),
		     `Label(input),
		     `PushButton("&OK")
		     )
	       );
    UserInput();
    CloseDialog();
}
