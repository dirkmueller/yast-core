	// This file is generated by generateYCPwrappers from Y2UINamespace.h

		case 0: // SetLanguage
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			return m_instance->SetLanguage (m_param1->asString()); 
		case 1: // SetLanguage
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "String"); return YCPVoid();}
			return m_instance->SetLanguage (m_param1->asString(), m_param2->asString()); 
		case 2: // GetProductName
			
			return m_instance->GetProductName (); 
		case 3: // SetProductName
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			return m_instance->SetProductName (m_param1->asString()); 
		case 4: // SetConsoleFont
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "String"); return YCPVoid();}
			if (m_param3->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 3, "String"); return YCPVoid();}
			if (m_param4->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 4, "String"); return YCPVoid();}
			if (m_param5->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 5, "String"); return YCPVoid();}
			return m_instance->SetConsoleFont (m_param1->asString(), m_param2->asString(), m_param3->asString(), m_param4->asString(), m_param5->asString()); 
		case 5: // SetKeyboard
			
			return m_instance->SetKeyboard (); 
		case 6: // GetLanguage
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Boolean"); return YCPVoid();}
			return m_instance->GetLanguage (m_param1->asBoolean()); 
		case 7: // UserInput
			
			return m_instance->UserInput (); 
		case 8: // PollInput
			
			return m_instance->PollInput (); 
		case 9: // TimeoutUserInput
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Integer"); return YCPVoid();}
			return m_instance->TimeoutUserInput (m_param1->asInteger()); 
		case 10: // WaitForEvent
			
			return m_instance->WaitForEvent (); 
		case 11: // WaitForEvent
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Integer"); return YCPVoid();}
			return m_instance->WaitForEvent (m_param1->asInteger()); 
		case 12: // OpenDialog
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			return m_instance->OpenDialog (m_param1->asTerm()); 
		case 13: // OpenDialog
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Term"); return YCPVoid();}
			return m_instance->OpenDialog (m_param1->asTerm(), m_param2->asTerm()); 
		case 14: // CloseDialog
			
			return m_instance->CloseDialog (); 
		case 15: // ChangeWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Symbol"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Symbol"); return YCPVoid();}
			// m_param3 may be nil
			return m_instance->ChangeWidget (m_param1->asSymbol(), m_param2->asSymbol(), m_param3->asValue()); 
		case 16: // ChangeWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Symbol"); return YCPVoid();}
			// m_param3 may be nil
			return m_instance->ChangeWidget (m_param1->asTerm(), m_param2->asSymbol(), m_param3->asValue()); 
		case 17: // ChangeWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Term"); return YCPVoid();}
			if (m_param3->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 3, "Value"); return YCPVoid();}
			return m_instance->ChangeWidget (m_param1->asTerm(), m_param2->asTerm(), m_param3->asValue()); 
		case 18: // QueryWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Symbol"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Symbol"); return YCPVoid();}
			return m_instance->QueryWidget (m_param1->asSymbol(), m_param2->asSymbol()); 
		case 19: // QueryWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Symbol"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Term"); return YCPVoid();}
			return m_instance->QueryWidget (m_param1->asSymbol(), m_param2->asTerm()); 
		case 20: // QueryWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Symbol"); return YCPVoid();}
			return m_instance->QueryWidget (m_param1->asTerm(), m_param2->asSymbol()); 
		case 21: // QueryWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Term"); return YCPVoid();}
			return m_instance->QueryWidget (m_param1->asTerm(), m_param2->asTerm()); 
		case 22: // ReplaceWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Symbol"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Term"); return YCPVoid();}
			return m_instance->ReplaceWidget (m_param1->asSymbol(), m_param2->asTerm()); 
		case 23: // ReplaceWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "Term"); return YCPVoid();}
			return m_instance->ReplaceWidget (m_param1->asTerm(), m_param2->asTerm()); 
		case 24: // SetFocus
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Symbol"); return YCPVoid();}
			return m_instance->SetFocus (m_param1->asSymbol()); 
		case 25: // SetFocus
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			return m_instance->SetFocus (m_param1->asTerm()); 
		case 26: // RunInTerminal
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			return m_instance->RunInTerminal (m_param1->asString()); 
		case 27: // BusyCursor
			
			return m_instance->BusyCursor (); 
		case 28: // RedrawScreen
			
			return m_instance->RedrawScreen (); 
		case 29: // NormalCursor
			
			return m_instance->NormalCursor (); 
		case 30: // MakeScreenShot
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			return m_instance->MakeScreenShot (m_param1->asString()); 
		case 31: // MakeScreenShot
			
			return m_instance->MakeScreenShot (); 
		case 32: // DumpWidgetTree
			
			return m_instance->DumpWidgetTree (); 
		case 33: // Beep
			
			return m_instance->Beep (); 
		case 34: // RecordMacro
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			return m_instance->RecordMacro (m_param1->asString()); 
		case 35: // StopRecordMacro
			
			return m_instance->StopRecordMacro (); 
		case 36: // PlayMacro
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			return m_instance->PlayMacro (m_param1->asString()); 
		case 37: // FakeUserInput
			
			return m_instance->FakeUserInput (); 
		case 38: // FakeUserInput
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Value"); return YCPVoid();}
			return m_instance->FakeUserInput (m_param1->asValue()); 
		case 39: // Glyph
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Symbol"); return YCPVoid();}
			return m_instance->Glyph (m_param1->asSymbol()); 
		case 40: // GetDisplayInfo
			
			return m_instance->GetDisplayInfo (); 
		case 41: // RecalcLayout
			
			return m_instance->RecalcLayout (); 
		case 42: // PostponeShortcutCheck
			
			return m_instance->PostponeShortcutCheck (); 
		case 43: // CheckShortcuts
			
			return m_instance->CheckShortcuts (); 
		case 44: // WidgetExists
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Symbol"); return YCPVoid();}
			return m_instance->WidgetExists (m_param1->asSymbol()); 
		case 45: // WidgetExists
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			return m_instance->WidgetExists (m_param1->asTerm()); 
		case 46: // RunPkgSelection
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Value"); return YCPVoid();}
			return m_instance->RunPkgSelection (m_param1->asValue()); 
		case 47: // AskForExistingDirectory
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "String"); return YCPVoid();}
			return m_instance->AskForExistingDirectory (m_param1->asString(), m_param2->asString()); 
		case 48: // AskForExistingFile
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "String"); return YCPVoid();}
			if (m_param3->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 3, "String"); return YCPVoid();}
			return m_instance->AskForExistingFile (m_param1->asString(), m_param2->asString(), m_param3->asString()); 
		case 49: // AskForSaveFileName
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "String"); return YCPVoid();}
			if (m_param3->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 3, "String"); return YCPVoid();}
			return m_instance->AskForSaveFileName (m_param1->asString(), m_param2->asString(), m_param3->asString()); 
		case 50: // SetFunctionKeys
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Map"); return YCPVoid();}
			return m_instance->SetFunctionKeys (m_param1->asMap()); 
		case 51: // Recode
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			if (m_param2->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 2, "String"); return YCPVoid();}
			if (m_param3->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 3, "String"); return YCPVoid();}
			return m_instance->Recode (m_param1->asString(), m_param2->asString(), m_param3->asString()); 
		case 52: // SetModulename
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "String"); return YCPVoid();}
			return m_instance->SetModulename (m_param1->asString()); 
		case 53: // HasSpecialWidget
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Symbol"); return YCPVoid();}
			return m_instance->HasSpecialWidget (m_param1->asSymbol()); 
		case 54: // WizardCommand
			if (m_param1->isVoid()) {ycp2error("Parameter %d is nil, %s is required", 1, "Term"); return YCPVoid();}
			return m_instance->WizardCommand (m_param1->asTerm()); 
