	// This file is generated by generateYCPwrappers from Y2UINamespace.h

	enterSymbol (new SymbolEntry (this, 0, "SetLanguage", SymbolEntry::c_function, Type::fromSignature ("void (string)") ) );
	_registered_functions.push_back ("SetLanguage");
	enterSymbol (new SymbolEntry (this, 1, "SetLanguage", SymbolEntry::c_function, Type::fromSignature ("void (string, string)") ) );
	_registered_functions.push_back ("SetLanguage");
	enterSymbol (new SymbolEntry (this, 2, "GetProductName", SymbolEntry::c_function, Type::fromSignature ("string ()") ) );
	_registered_functions.push_back ("GetProductName");
	enterSymbol (new SymbolEntry (this, 3, "SetProductName", SymbolEntry::c_function, Type::fromSignature ("void (string)") ) );
	_registered_functions.push_back ("SetProductName");
	enterSymbol (new SymbolEntry (this, 4, "SetConsoleFont", SymbolEntry::c_function, Type::fromSignature ("void (string, string, string, string, string)") ) );
	_registered_functions.push_back ("SetConsoleFont");
	enterSymbol (new SymbolEntry (this, 5, "SetKeyboard", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("SetKeyboard");
	enterSymbol (new SymbolEntry (this, 6, "GetLanguage", SymbolEntry::c_function, Type::fromSignature ("string (boolean)") ) );
	_registered_functions.push_back ("GetLanguage");
	enterSymbol (new SymbolEntry (this, 7, "UserInput", SymbolEntry::c_function, Type::fromSignature ("any()") ) );
	_registered_functions.push_back ("UserInput");
	enterSymbol (new SymbolEntry (this, 8, "PollInput", SymbolEntry::c_function, Type::fromSignature ("any ()") ) );
	_registered_functions.push_back ("PollInput");
	enterSymbol (new SymbolEntry (this, 9, "TimeoutUserInput", SymbolEntry::c_function, Type::fromSignature ("any (integer)") ) );
	_registered_functions.push_back ("TimeoutUserInput");
	enterSymbol (new SymbolEntry (this, 10, "WaitForEvent", SymbolEntry::c_function, Type::fromSignature ("map<string,any> ()") ) );
	_registered_functions.push_back ("WaitForEvent");
	enterSymbol (new SymbolEntry (this, 11, "WaitForEvent", SymbolEntry::c_function, Type::fromSignature ("map<string,any> (integer)") ) );
	_registered_functions.push_back ("WaitForEvent");
	enterSymbol (new SymbolEntry (this, 12, "OpenDialog", SymbolEntry::c_function, Type::fromSignature ("void(term)") ) );
	_registered_functions.push_back ("OpenDialog");
	enterSymbol (new SymbolEntry (this, 13, "OpenDialog", SymbolEntry::c_function, Type::fromSignature ("void(term,term)") ) );
	_registered_functions.push_back ("OpenDialog");
	enterSymbol (new SymbolEntry (this, 14, "CloseDialog", SymbolEntry::c_function, Type::fromSignature ("boolean()") ) );
	_registered_functions.push_back ("CloseDialog");
	enterSymbol (new SymbolEntry (this, 15, "ChangeWidget", SymbolEntry::c_function, Type::fromSignature ("boolean (symbol, symbol, any)") ) );
	_registered_functions.push_back ("ChangeWidget");
	enterSymbol (new SymbolEntry (this, 16, "ChangeWidget", SymbolEntry::c_function, Type::fromSignature ("boolean (term, symbol, any)") ) );
	_registered_functions.push_back ("ChangeWidget");
	enterSymbol (new SymbolEntry (this, 17, "ChangeWidget", SymbolEntry::c_function, Type::fromSignature ("boolean (term, term, any)") ) );
	_registered_functions.push_back ("ChangeWidget");
	enterSymbol (new SymbolEntry (this, 18, "QueryWidget", SymbolEntry::c_function, Type::fromSignature ("any (symbol, symbol)") ) );
	_registered_functions.push_back ("QueryWidget");
	enterSymbol (new SymbolEntry (this, 19, "QueryWidget", SymbolEntry::c_function, Type::fromSignature ("any (symbol, term)") ) );
	_registered_functions.push_back ("QueryWidget");
	enterSymbol (new SymbolEntry (this, 20, "QueryWidget", SymbolEntry::c_function, Type::fromSignature ("any (term, symbol)") ) );
	_registered_functions.push_back ("QueryWidget");
	enterSymbol (new SymbolEntry (this, 21, "QueryWidget", SymbolEntry::c_function, Type::fromSignature ("any (term, term)") ) );
	_registered_functions.push_back ("QueryWidget");
	enterSymbol (new SymbolEntry (this, 22, "ReplaceWidget", SymbolEntry::c_function, Type::fromSignature ("boolean (symbol, term)") ) );
	_registered_functions.push_back ("ReplaceWidget");
	enterSymbol (new SymbolEntry (this, 23, "ReplaceWidget", SymbolEntry::c_function, Type::fromSignature ("boolean (term, term)") ) );
	_registered_functions.push_back ("ReplaceWidget");
	enterSymbol (new SymbolEntry (this, 24, "SetFocus", SymbolEntry::c_function, Type::fromSignature ("boolean (symbol)") ) );
	_registered_functions.push_back ("SetFocus");
	enterSymbol (new SymbolEntry (this, 25, "SetFocus", SymbolEntry::c_function, Type::fromSignature ("boolean (term)") ) );
	_registered_functions.push_back ("SetFocus");
	enterSymbol (new SymbolEntry (this, 26, "RunInTerminal", SymbolEntry::c_function, Type::fromSignature ("integer (string)") ) );
	_registered_functions.push_back ("RunInTerminal");
	enterSymbol (new SymbolEntry (this, 27, "BusyCursor", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("BusyCursor");
	enterSymbol (new SymbolEntry (this, 28, "RedrawScreen", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("RedrawScreen");
	enterSymbol (new SymbolEntry (this, 29, "NormalCursor", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("NormalCursor");
	enterSymbol (new SymbolEntry (this, 30, "MakeScreenShot", SymbolEntry::c_function, Type::fromSignature ("void (string)") ) );
	_registered_functions.push_back ("MakeScreenShot");
	enterSymbol (new SymbolEntry (this, 31, "MakeScreenShot", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("MakeScreenShot");
	enterSymbol (new SymbolEntry (this, 32, "DumpWidgetTree", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("DumpWidgetTree");
	enterSymbol (new SymbolEntry (this, 33, "Beep", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("Beep");
	enterSymbol (new SymbolEntry (this, 34, "RecordMacro", SymbolEntry::c_function, Type::fromSignature ("void (string)") ) );
	_registered_functions.push_back ("RecordMacro");
	enterSymbol (new SymbolEntry (this, 35, "StopRecordMacro", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("StopRecordMacro");
	enterSymbol (new SymbolEntry (this, 36, "PlayMacro", SymbolEntry::c_function, Type::fromSignature ("void (string)") ) );
	_registered_functions.push_back ("PlayMacro");
	enterSymbol (new SymbolEntry (this, 37, "FakeUserInput", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("FakeUserInput");
	enterSymbol (new SymbolEntry (this, 38, "FakeUserInput", SymbolEntry::c_function, Type::fromSignature ("void (any)") ) );
	_registered_functions.push_back ("FakeUserInput");
	enterSymbol (new SymbolEntry (this, 39, "Glyph", SymbolEntry::c_function, Type::fromSignature ("string (symbol)") ) );
	_registered_functions.push_back ("Glyph");
	enterSymbol (new SymbolEntry (this, 40, "GetDisplayInfo", SymbolEntry::c_function, Type::fromSignature ("map<string,any> ()") ) );
	_registered_functions.push_back ("GetDisplayInfo");
	enterSymbol (new SymbolEntry (this, 41, "RecalcLayout", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("RecalcLayout");
	enterSymbol (new SymbolEntry (this, 42, "PostponeShortcutCheck", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("PostponeShortcutCheck");
	enterSymbol (new SymbolEntry (this, 43, "CheckShortcuts", SymbolEntry::c_function, Type::fromSignature ("void ()") ) );
	_registered_functions.push_back ("CheckShortcuts");
	enterSymbol (new SymbolEntry (this, 44, "WidgetExists", SymbolEntry::c_function, Type::fromSignature ("boolean (symbol)") ) );
	_registered_functions.push_back ("WidgetExists");
	enterSymbol (new SymbolEntry (this, 45, "WidgetExists", SymbolEntry::c_function, Type::fromSignature ("boolean (term)") ) );
	_registered_functions.push_back ("WidgetExists");
	enterSymbol (new SymbolEntry (this, 46, "RunPkgSelection", SymbolEntry::c_function, Type::fromSignature ("any (term)") ) );
	_registered_functions.push_back ("RunPkgSelection");
	enterSymbol (new SymbolEntry (this, 47, "AskForExistingDirectory", SymbolEntry::c_function, Type::fromSignature ("string (string, string)") ) );
	_registered_functions.push_back ("AskForExistingDirectory");
	enterSymbol (new SymbolEntry (this, 48, "AskForExistingFile", SymbolEntry::c_function, Type::fromSignature ("string (string, string, string)") ) );
	_registered_functions.push_back ("AskForExistingFile");
	enterSymbol (new SymbolEntry (this, 49, "AskForSaveFileName", SymbolEntry::c_function, Type::fromSignature ("string (string, string, string)") ) );
	_registered_functions.push_back ("AskForSaveFileName");
	enterSymbol (new SymbolEntry (this, 50, "SetFunctionKeys", SymbolEntry::c_function, Type::fromSignature ("void (map<string,integer>)") ) );
	_registered_functions.push_back ("SetFunctionKeys");
	enterSymbol (new SymbolEntry (this, 51, "Recode", SymbolEntry::c_function, Type::fromSignature ("any (string, string, string)") ) );
	_registered_functions.push_back ("Recode");
	enterSymbol (new SymbolEntry (this, 52, "HasSpecialWidget", SymbolEntry::c_function, Type::fromSignature ("boolean (symbol)") ) );
	_registered_functions.push_back ("HasSpecialWidget");
	enterSymbol (new SymbolEntry (this, 53, "WizardCommand", SymbolEntry::c_function, Type::fromSignature ("boolean (term)") ) );
	_registered_functions.push_back ("WizardCommand");
