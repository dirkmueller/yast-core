/*---------------------------------------------------------------------\
|								       |
|		       __   __	  ____ _____ ____		       |
|		       \ \ / /_ _/ ___|_   _|___ \		       |
|			\ V / _` \___ \ | |   __) |		       |
|			 | | (_| |___) || |  / __/		       |
|			 |_|\__,_|____/ |_| |_____|		       |
|								       |
|				core system			       |
|							 (C) SuSE GmbH |
\----------------------------------------------------------------------/

  File:	      YMacroRecorder.cc

  Author:     Stefan Hundhammer <sh@suse.de>

/-*/


#include <stdio.h>
#include <ycp/YCPSymbol.h>
#include <ycp/YCPString.h>
#include <ycp/YCPTerm.h>
#include <ycp/YCPVoid.h>

#define y2log_component "ui-macro"
#include <ycp/y2log.h>

#include "YUISymbols.h"
#include "YWidget.h"
#include "YMacroRecorder.h"


#define YMACRO_INDENT "    "	// 4 blanks


YMacroRecorder::YMacroRecorder( const string & macroFileName )
{
    openMacroFile( macroFileName );
    writeMacroFileHeader( );
}


YMacroRecorder::~YMacroRecorder( )
{
    writeMacroFileFooter( );
    closeMacroFile( );
}


void YMacroRecorder::openMacroFile( const string &macroFileName )
{
    _macroFile = fopen( macroFileName.c_str( ), "w" );

    if ( _macroFile )
    {
	y2milestone( "Recording macro to %s", macroFileName.c_str( ) );

    }
    else
    {
	y2error( "Can't record to macro file %s", macroFileName.c_str( ) );
    }
}


void YMacroRecorder::closeMacroFile( )
{
    if ( _macroFile )
    {
	fclose( _macroFile );
	_macroFile = 0;
	y2milestone( "Macro recording done." );
    }
}


void YMacroRecorder::writeMacroFileHeader( )
{
    if ( ! _macroFile )
	return;

    fprintf( _macroFile,
	     "// YaST2 UI macro file generated by UI macro recorder\n"
	     "//\n"
	     "// Each block will be executed ( in UI context) just before the next UserInput( ).\n"
	     "// The closing brace ( '}') of each block relinquishes control back to the\n"
	     "// YCP source. Inside each block arbitrary YCP code can manually be added.\n"
	     "\n"
	     "{\n"
	     );
}


void YMacroRecorder::writeMacroFileFooter( )
{
    if ( ! _macroFile )
	return;

    fprintf( _macroFile, "}\n" );
}


void YMacroRecorder::beginBlock( )
{
    if ( ! _macroFile )
	return;

    fprintf( _macroFile, "%s{\n", YMACRO_INDENT );
}


void YMacroRecorder::endBlock( )
{
    if ( ! _macroFile )
	return;

    fprintf( _macroFile, "%s}\n\n", YMACRO_INDENT );
}


void YMacroRecorder::recordUserInput( const YCPValue &input )
{
    if ( ! _macroFile )
	return;

    YCPTerm term( YCPSymbol( YUIBuiltin_FakeUserInput, false ) );
    term->add( input );

    fprintf( _macroFile, "%s%s%s;\n", YMACRO_INDENT, YMACRO_INDENT,
	     term->toString( ).c_str() );

    fflush( _macroFile );	// sync to disk at this point - for debugging

    y2debug( "%s", input.isNull( ) ? "nil" : input->toString( ).c_str() );
}


void YMacroRecorder::recordWidgetProperty( YWidget *	widget,
					   const char *	propertyName )
{
    if ( ! _macroFile )
	return;

    if ( ! widget )
    {
	y2error( "Null widget" );
	return;
    }

    if ( ! widget->isValid( ) )
    {
	y2error( "Invalid widget" );
	return;
    }

    if ( ! propertyName )
    {
	y2error ( "Null property name" );
	return;
    }

    if ( ! widget->hasId( ) )
    {
	// It's pointless to save properties if the widget doesn't have an ID -
	// there is no way to restore the property without an ID.

	y2warning( "%s widget doesn't have an ID", widget->widgetClass( ) );

	return;
    }


    YCPTerm term( YCPSymbol( YUIBuiltin_ChangeWidget, false ) );	// ChangeWidget( )
    YCPTerm id( YCPSymbol( YUISymbol_id, true ) );			// `id( )
    id->add( widget->id( ) );						// `id( `something)
    term->add( id );							// ChangeWidget( `id(`something))
    YCPSymbol property( propertyName, true );				// `Value	etc.

    term->add( property );						// ChangeWidget( `id(`something), `Value)
    term->add( widget->queryWidget( property ) );			// ChangeWidget( `id(`something), `Value, 42)

    fprintf( _macroFile, "%s%s%s;\t// %s\n",
	     YMACRO_INDENT, YMACRO_INDENT, term->toString( ).c_str(),
	     widget->widgetClass( ) );

    y2debug( "Recording %s status: %s",
	     widget->widgetClass( ), term->toString( ).c_str() );
}

