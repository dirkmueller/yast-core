
// check setting an environment variable in both execution possibilities (direct and via shell)

{
    integer id = (integer)(SCR::Execute(.start_shell, "cat"));

    // no output
    string out1 = (string)SCR::Read(.read, id);

    SCR::Write(., id, "foo\n");
    sleep(50);
    // read "foo\n"
    string out2 = (string)SCR::Read(.read, id);

    SCR::Write(., id, "foo2\nfoo2\n");
    sleep(50);
    // read "foo2\nfoo2\n"
    string out3 = (string)SCR::Read(.read, id);

    // no output
    string out4 = (string)SCR::Read(.read, id);

    // close the communication channel
    SCR::Execute(.close, id);
    while(SCR::Read(.running, id) == true) sleep(20);

    return [ out1, out2, out3, out4 ];
}

{
    integer id = (integer)(SCR::Execute(.start_shell, "cat"));

    // no output
    string out1 = (string)SCR::Read(.read_line, id);

    SCR::Write(., id, "foo\n");
    sleep(50);
    // read "foo\n"
    string out2 = (string)SCR::Read(.read_line, id);

    SCR::Write(., id, "foo2\nfoo2\n");
    sleep(50);
    // read "foo2\n"
    string out3 = (string)SCR::Read(.read_line, id);

    // read "foo2\n"
    string out4 = (string)SCR::Read(.read_line, id);

    // no output
    string out5 = (string)SCR::Read(.read_line, id);


    // close the communication channel
    SCR::Execute(.close, id);
    while(SCR::Read(.running, id) == true) sleep(20);

    return [ out1, out2, out3, out4, out5 ];
}
